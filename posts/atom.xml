<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tonai.github.io/blog/posts</id>
    <title>Tony Cabaye Blog</title>
    <updated>2024-05-31T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tonai.github.io/blog/posts"/>
    <subtitle>Tony Cabaye Blog</subtitle>
    <icon>https://tonai.github.io/blog/img/logo-32.png</icon>
    <entry>
        <title type="html"><![CDATA[2024 JavaScript bundlers comparison]]></title>
        <id>https://tonai.github.io/blog/posts/bundlers-comparison</id>
        <link href="https://tonai.github.io/blog/posts/bundlers-comparison"/>
        <updated>2024-05-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This article compares different JavaScript bundlers in the context of building a library and the context of building an app.]]></summary>
        <content type="html"><![CDATA[<p>The JavaScript ecosystem is really vast and rich but because of that it is really not easy to choose the right tool when you have to.</p>
<p>Did you never ask yourself what bundler should I use for that new Project ?</p>
<p>Maybe you already have your stack that you reuse between projects ?</p>
<p>But it is really optimal and when did you update it the last time ?</p>
<p>Sometimes, frameworks make the choice for you and you don't have to worry about that, but:</p>
<ul>
<li>that's not always the case</li>
<li>sometimes some tools you are used to becomes obsolete (Create React App)</li>
<li>maybe you want to create a reusable library and not an entire app</li>
<li>or any other reason you may have to make the decision of a JavaScript bundler...</li>
</ul>
<p>This article is here to help you make that choice by:</p>
<ol>
<li>first defining what is a bundler.</li>
<li>then focusing on the scenario of bundling a reusable library.</li>
<li>and next focusing on the scenario of bundling an app.</li>
<li>finally drawing some conclusions regarding the best bundlers to use</li>
</ol>
<p>All the code used for the benchmarks is available in <a href="https://github.com/Smile-SA/bundlers-comparison" target="_blank" rel="noopener noreferrer">this repository</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bundlers">Bundlers<a class="hash-link" aria-label="Direct link to Bundlers" title="Direct link to Bundlers" href="https://tonai.github.io/blog/posts/bundlers-comparison#bundlers">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-bundler">What is a bundler<a class="hash-link" aria-label="Direct link to What is a bundler" title="Direct link to What is a bundler" href="https://tonai.github.io/blog/posts/bundlers-comparison#what-is-a-bundler">​</a></h3>
<p>Bundlers are really useful tools that... bundles your application.</p>
<p>When you develop a library or an app, it is easier to write your code in multiple files, make use of import statements...etc, because the code you write needs to be readable for a human (if you want it to be maintainable in the long term).</p>
<p>But this written code is not optimized for production. For production you probably want:</p>
<ul>
<li>the code to be concatenated, minified...etc. for it to be downloaded as fast as possible by browsers.</li>
<li>to automatically transforms and injects polyfills or CSS vendor prefix to maximize browser compatibilities.</li>
<li>...etc.</li>
</ul>
<p>And that's the role of bundlers, they can process your entire app graph (including imports...etc.) and generate in the end an optimized, ready for production, set of files representing your app or your library.</p>
<p>Most of the time they can handle more than just JavaScript files, they can also handle images or CSS files, CSS modules, SASS...etc.</p>
<p>But they are not to be confounded with:</p>
<ul>
<li>parsers, transpilers and compilers like Babel, swc or Typescript that have for only purpose to parse, understand and transform JavaScript files (most of the time bundlers use these tools under the hood).</li>
<li>linters like ESLint or oxlint that check your code against errors or bad practices.</li>
<li>formatters like prettier or Biome that format your code to be the same across the entire repository, no matter who develops it</li>
</ul>
<p>In the end all these tools are needed for a good development tool chain, but in this article we will only focus on bundlers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bundler-candidates">Bundler candidates<a class="hash-link" aria-label="Direct link to Bundler candidates" title="Direct link to Bundler candidates" href="https://tonai.github.io/blog/posts/bundlers-comparison#bundler-candidates">​</a></h3>
<p>In this article we will tests following bundlers:</p>
<ul>
<li><a href="https://bun.sh/" target="_blank" rel="noopener noreferrer">Bun</a> (version 1.0.22): Bun is more than a bundler but it has a <code>build</code> command that seems to be really fast.</li>
<li><a href="https://esbuild.github.io/" target="_blank" rel="noopener noreferrer">esbuild</a> (version 0.19.11)</li>
<li><a href="https://github.com/developit/microbundle" target="_blank" rel="noopener noreferrer">microbundle</a> (0.15.1)</li>
<li><a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">Parcel</a> (version 2.11.0)</li>
<li><a href="https://rollupjs.org/" target="_blank" rel="noopener noreferrer">rollup.js</a> (version 4.9.4)</li>
<li><a href="https://github.com/egoist/tsup" target="_blank" rel="noopener noreferrer">tsup</a> (version 8.0.1)</li>
<li><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">Typescript</a> (version 5.3.3): Typescript is not a bundler, but it can sometimes be enough in some scenario.</li>
<li><a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a> (version 5.0.11)</li>
<li><a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">Webpack</a> (version 5.89.0)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-disqualified-tools">Other disqualified tools<a class="hash-link" aria-label="Direct link to Other disqualified tools" title="Direct link to Other disqualified tools" href="https://tonai.github.io/blog/posts/bundlers-comparison#other-disqualified-tools">​</a></h3>
<p>We will not tests following tools:</p>
<ul>
<li><a href="https://github.com/preactjs/wmr" target="_blank" rel="noopener noreferrer">WMR</a>: it can only bundle an app not a library, only works for Preact and seems to have issues working in a monorepo.</li>
<li><a href="https://turbo.build/pack" target="_blank" rel="noopener noreferrer">Turbopack</a>: it is only available as an option in the Next.js tool chain and is still in beta.</li>
<li><a href="https://browserify.org/" target="_blank" rel="noopener noreferrer">Browserify</a>: it can bundle an app, not a library, and lack a lot of features comparing to modern bundlers.</li>
<li><a href="https://gulpjs.com/" target="_blank" rel="noopener noreferrer">Gulp</a>, <a href="https://gruntjs.com/" target="_blank" rel="noopener noreferrer">Grunt</a>: they are bundler ancestors (but they are not bundlers), requires a lot of configuration and lack a lot of features comparing to modern bundlers.</li>
<li><a href="https://brunch.io/" target="_blank" rel="noopener noreferrer">Brunch</a>, <a href="https://www.snowpack.dev/" target="_blank" rel="noopener noreferrer">Snowpack</a>, <a href="https://packem.github.io/" target="_blank" rel="noopener noreferrer">Packem</a>, <a href="https://github.com/vercel/pkg" target="_blank" rel="noopener noreferrer">pkg</a> : they are not maintained any more.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bundling-a-library">Bundling a library<a class="hash-link" aria-label="Direct link to Bundling a library" title="Direct link to Bundling a library" href="https://tonai.github.io/blog/posts/bundlers-comparison#bundling-a-library">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="operating-mode">Operating mode<a class="hash-link" aria-label="Direct link to Operating mode" title="Direct link to Operating mode" href="https://tonai.github.io/blog/posts/bundlers-comparison#operating-mode">​</a></h3>
<p>We will create some piece of code that we will use for all bundlers.</p>
<p>This piece of code will be used to check the capabilities of bundlers :</p>
<ol>
<li>it will use Typescript.</li>
<li>it will import a JSON file.</li>
<li>it will contain a React component.</li>
<li>that component will import an image (svg) as url for an <img> tag,</li>
<li>and a CSS file that uses an image (jpg) as background-image.</li>
<li>it will also contain a file with a big string that we won't import. The purpose here is to check if the library is tree-shakable: we don't want that unused string to be included in the production version of the app.</li>
</ol>
<p>In the end the code source will be composed of approximately 10 files.</p>
<p>We also want the library to be generated in different formats:</p>
<ul>
<li><code>ESM</code> (ES module)</li>
<li><code>CJS</code> (Common JS)</li>
<li>Browser compatible format (like <code>IIFE</code>)</li>
<li>Other formats like <code>UMD</code> or <code>AMD</code> is just a bonus (<code>AMD</code> being not really used anymore)</li>
</ul>
<p>We will also measure:</p>
<ul>
<li>the time taken to generate the library build</li>
<li>the generated bundle size</li>
</ul>
<p>Then we will do the same measurements using another bigger, real library that is composed of approximately 100 files.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a class="hash-link" aria-label="Direct link to Setup" title="Direct link to Setup" href="https://tonai.github.io/blog/posts/bundlers-comparison#setup">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="bun">Bun<a class="hash-link" aria-label="Direct link to Bun" title="Direct link to Bun" href="https://tonai.github.io/blog/posts/bundlers-comparison#bun">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token assign-left variable" style="color:#36acaa">NODE_ENV</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">production bun build src/index.ts </span><span class="token parameter variable" style="color:#36acaa">--outdir</span><span class="token plain"> dist </span><span class="token parameter variable" style="color:#36acaa">--target</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--format</span><span class="token plain"> esm </span><span class="token parameter variable" style="color:#36acaa">--external</span><span class="token plain"> react</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works without configuration file, only CLI options (some options needs to be defined inside a <code>bunfig.toml</code> file).</li>
<li>We need to add <code>NODE_ENV=production</code> for the output to be more production ready.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="esbuild">esbuild<a class="hash-link" aria-label="Direct link to esbuild" title="Direct link to esbuild" href="https://tonai.github.io/blog/posts/bundlers-comparison#esbuild">​</a></h4>
<p>We use the following commands to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">esbuild src/index.ts </span><span class="token parameter variable" style="color:#36acaa">--outfile</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dist/esbuild-lib.mjs </span><span class="token parameter variable" style="color:#36acaa">--bundle</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--jsx</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">automatic </span><span class="token parameter variable" style="color:#36acaa">--external:react</span><span class="token plain"> --loader:.jpg</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dataurl </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --loader:.svg</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dataurl </span><span class="token parameter variable" style="color:#36acaa">--format</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">esm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">esbuild src/index.ts </span><span class="token parameter variable" style="color:#36acaa">--outfile</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dist/esbuild-lib.cjs </span><span class="token parameter variable" style="color:#36acaa">--bundle</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--jsx</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">automatic </span><span class="token parameter variable" style="color:#36acaa">--external:react</span><span class="token plain"> --loader:.jpg</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dataurl </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --loader:.svg</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dataurl </span><span class="token parameter variable" style="color:#36acaa">--platform</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">node </span><span class="token parameter variable" style="color:#36acaa">--format</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">cjs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">esbuild src/index.ts </span><span class="token parameter variable" style="color:#36acaa">--outfile</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dist/esbuild-lib.js </span><span class="token parameter variable" style="color:#36acaa">--bundle</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--jsx</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">automatic </span><span class="token parameter variable" style="color:#36acaa">--external:react</span><span class="token plain"> --loader:.jpg</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dataurl </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --loader:.svg</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">dataurl </span><span class="token parameter variable" style="color:#36acaa">--platform</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">browser </span><span class="token parameter variable" style="color:#36acaa">--format</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">iife</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works without configuration file, only CLI options.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="microbundle">microbundle<a class="hash-link" aria-label="Direct link to microbundle" title="Direct link to microbundle" href="https://tonai.github.io/blog/posts/bundlers-comparison#microbundle">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">microbundle </span><span class="token parameter variable" style="color:#36acaa">--jsx</span><span class="token plain"> React.createElement </span><span class="token parameter variable" style="color:#36acaa">--jsxFragment</span><span class="token plain"> React.Fragment </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--jsxImportSource</span><span class="token plain"> react </span><span class="token parameter variable" style="color:#36acaa">--globals</span><span class="token plain"> react/jsx-runtime</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">jsxRuntime</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works without configuration file, only CLI options.</li>
<li>There are also no need to add a lot of CLI options as the default configuration is already well optimized.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="parcel">Parcel<a class="hash-link" aria-label="Direct link to Parcel" title="Direct link to Parcel" href="https://tonai.github.io/blog/posts/bundlers-comparison#parcel">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">parcel build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works without configuration file but you need to add some information in <code>package.json</code>.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="rollup">Rollup<a class="hash-link" aria-label="Direct link to Rollup" title="Direct link to Rollup" href="https://tonai.github.io/blog/posts/bundlers-comparison#rollup">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rollup </span><span class="token parameter variable" style="color:#36acaa">-c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works with some configuration in the <code>rollup.config.js</code> file.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tsup">tsup<a class="hash-link" aria-label="Direct link to tsup" title="Direct link to tsup" href="https://tonai.github.io/blog/posts/bundlers-comparison#tsup">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tsup src/index.ts </span><span class="token parameter variable" style="color:#36acaa">--format</span><span class="token plain"> esm,cjs,iife </span><span class="token parameter variable" style="color:#36acaa">--dts</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--loader</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'.jpg=dataurl'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--loader</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'.svg=dataurl'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works without configuration file, only CLI options.</li>
<li>There are also no need to add a lot of CLI options as the default configuration is already well optimized.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="typescript">Typescript<a class="hash-link" aria-label="Direct link to Typescript" title="Direct link to Typescript" href="https://tonai.github.io/blog/posts/bundlers-comparison#typescript">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tsc </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> tsc </span><span class="token parameter variable" style="color:#36acaa">--project</span><span class="token plain"> tsconfig.cjs.json</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works with some configuration in the <code>tsconfig.json</code> and <code>tsconfig.cjs.json</code> files.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="vite">Vite<a class="hash-link" aria-label="Direct link to Vite" title="Direct link to Vite" href="https://tonai.github.io/blog/posts/bundlers-comparison#vite">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vite build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works with some configuration in the <code>vite.config.js</code> file.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="webpack">Webpack<a class="hash-link" aria-label="Direct link to Webpack" title="Direct link to Webpack" href="https://tonai.github.io/blog/posts/bundlers-comparison#webpack">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vite build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>It works with some configuration in the <code>webpack.config.js</code> file.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feature-comparison">Feature comparison<a class="hash-link" aria-label="Direct link to Feature comparison" title="Direct link to Feature comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#feature-comparison">​</a></h3>
<p>Comparison of library bundler features and files compatibility.</p>
<table><thead><tr><th>Bundler</th><th>TypeScript</th><th>React</th><th>JSON</th><th>Image</th><th>CSS</th><th>Image in CSS</th><th>Tree-shakable</th></tr></thead><tbody><tr><td>Bun</td><td>❗①</td><td>✅</td><td>✅</td><td>❗②</td><td>❗③</td><td>❌②</td><td>✅</td></tr><tr><td>esbuild</td><td>❗①</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>microbundle</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>❗③</td><td>❌</td><td>✅</td></tr><tr><td>Parcel</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>❗④</td></tr><tr><td>Rollup</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>tsup</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Typescript</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>Vite</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Webpack</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr></tbody></table>
<p><strong>Notes:</strong></p>
<ol>
<li>Bundler does not generate Typescript definition files so we need to generated them separately.</li>
<li>Some loaders are not all available, so images can't be packaged as data-url.</li>
<li>The CSS file is generated, but we can't import that file in the app because the background-image can't be found.</li>
<li>The tree-shaking does not work with the small lib, but seems to work with the bigger lib.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="format-comparison">Format comparison<a class="hash-link" aria-label="Direct link to Format comparison" title="Direct link to Format comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#format-comparison">​</a></h3>
<table><thead><tr><th>Bundler</th><th>ESM</th><th>CJS</th><th>Browser</th></tr></thead><tbody><tr><td>Bun</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>esbuild</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>microbundle</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Parcel</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Rollup</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>tsup</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Typescript</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td>Vite</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Webpack</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bundle-size-comparison">Bundle size comparison<a class="hash-link" aria-label="Direct link to Bundle size comparison" title="Direct link to Bundle size comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#bundle-size-comparison">​</a></h3>
<p>Comparison of the final library size (JS in multiples formats + CSS).</p>
<p><strong>Small library:</strong></p>
<table><thead><tr><th>Bundler</th><th>ESM</th><th>CJS</th><th>Browser</th><th>CSS</th></tr></thead><tbody><tr><td>Bun</td><td>34k</td><td>-</td><td>-</td><td>0.5k①</td></tr><tr><td>esbuild</td><td>34k</td><td>35k</td><td>34k</td><td>33k</td></tr><tr><td>microbundle</td><td>33k</td><td>33k</td><td>33k</td><td>0.4k①</td></tr><tr><td>Parcel</td><td>36k</td><td>37k</td><td>-</td><td>35k</td></tr><tr><td>Rollup</td><td>33k</td><td>34k</td><td>34k</td><td>33k</td></tr><tr><td>tsup</td><td>34k</td><td>35k</td><td>164k</td><td>33k</td></tr><tr><td>Typescript</td><td>33k</td><td>35k</td><td>-</td><td>-</td></tr><tr><td>Vite</td><td>34k</td><td>33k</td><td>34k</td><td>33k</td></tr><tr><td>Webpack</td><td>34k</td><td>34k</td><td>34k</td><td>33k</td></tr></tbody></table>
<p><strong>Bigger library:</strong></p>
<table><thead><tr><th>Bundler</th><th>ESM</th><th>CJS</th><th>Browser</th></tr></thead><tbody><tr><td>Bun</td><td>109k</td><td>-</td><td>-</td></tr><tr><td>esbuild</td><td>139k</td><td>148k</td><td>153k</td></tr><tr><td>microbundle</td><td>64k</td><td>66k</td><td>66k</td></tr><tr><td>Parcel</td><td>146k</td><td>153k</td><td>-</td></tr><tr><td>Rollup</td><td>128k</td><td>133k</td><td>141k</td></tr><tr><td>tsup</td><td>144k</td><td>154k</td><td>2.2m</td></tr><tr><td>Typescript</td><td>323k</td><td>349k</td><td>-</td></tr><tr><td>Vite</td><td>108k</td><td>79k</td><td>79k</td></tr><tr><td>Webpack</td><td>96k</td><td>95k</td><td>94k</td></tr></tbody></table>
<p><strong>Notes:</strong></p>
<ol>
<li>Compared to other bundlers the generated CSS file is small because it does not contain the background-image as data-url.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="performance-comparison">Performance comparison<a class="hash-link" aria-label="Direct link to Performance comparison" title="Direct link to Performance comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#performance-comparison">​</a></h3>
<p>Comparison of the time taken to generate the library bundle.</p>
<p><strong>Small library:</strong></p>
<table><thead><tr><th>Bundler</th><th>Command</th><th>Types</th><th>Total</th></tr></thead><tbody><tr><td>Bun</td><td>~200ms</td><td>~1.1s</td><td>~1.5s①</td></tr><tr><td>esbuild</td><td>~200ms</td><td>~1.1s</td><td>~1.5s②</td></tr><tr><td>microbundle</td><td>~4.6s④</td><td>-</td><td>~4.6s③④</td></tr><tr><td>Parcel</td><td>~900ms④</td><td>-</td><td>~900ms②④</td></tr><tr><td>Rollup</td><td>~1.7s</td><td>-</td><td>~1.7s③</td></tr><tr><td>tsup</td><td>~1.7s</td><td>-</td><td>~1.7s③</td></tr><tr><td>Typescript</td><td>~1.1s</td><td>-</td><td>~2.3s②</td></tr><tr><td>Vite</td><td>~1.8s</td><td>-</td><td>~1.8s③</td></tr><tr><td>Webpack</td><td>~2.6s</td><td>-</td><td>~3.2s③</td></tr></tbody></table>
<p><strong>Bigger library:</strong></p>
<table><thead><tr><th>Bundler</th><th>Command</th><th>Types</th><th>Total</th></tr></thead><tbody><tr><td>Bun</td><td>~200ms</td><td>~3.7s</td><td>~4.3s①</td></tr><tr><td>esbuild</td><td>~200ms</td><td>~3.7s</td><td>~4.3s②</td></tr><tr><td>microbundle</td><td>~24s④</td><td>-</td><td>~24s③④</td></tr><tr><td>Parcel</td><td>~1s④</td><td>-</td><td>~1s②④</td></tr><tr><td>Rollup</td><td>~5s</td><td>-</td><td>~5s③</td></tr><tr><td>tsup</td><td>~4.9s</td><td>-</td><td>~4.9s③</td></tr><tr><td>Typescript</td><td>~3.8s</td><td>-</td><td>~7.6s②</td></tr><tr><td>Vite</td><td>~5.3s</td><td>-</td><td>~5.3s③</td></tr><tr><td>Webpack</td><td>~7.2s</td><td>-</td><td>~17s③</td></tr></tbody></table>
<p><strong>Notes:</strong></p>
<ol>
<li>ESM + Types</li>
<li>ESM + CJS + Types</li>
<li>ESM + CJS + Browser + Types</li>
<li>With cache</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bundling-an-app">Bundling an app<a class="hash-link" aria-label="Direct link to Bundling an app" title="Direct link to Bundling an app" href="https://tonai.github.io/blog/posts/bundlers-comparison#bundling-an-app">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="operating-mode-1">Operating mode<a class="hash-link" aria-label="Direct link to Operating mode" title="Direct link to Operating mode" href="https://tonai.github.io/blog/posts/bundlers-comparison#operating-mode-1">​</a></h3>
<p>Now it is time to reuse our 9 libraries and build an app for each of them and for all bundlers (excluding Bun, microbundle, tsup and TypeScript that are not suited for this case).</p>
<p>For each bundler we want:</p>
<ol>
<li>to test each library to check the compatibility, integration and features with the bundler.</li>
<li>to test them with one configuration (multiple entry points mode).</li>
<li>the bundler to manage the HTML files and automatically inject JS and CSS files.</li>
<li>to have both a development environment and being able to build the app for production.</li>
<li>to have HMR (Hot Module Replacement) for a better development experience.</li>
<li>to generate sourcemaps.</li>
<li>the bundler to be able to generate a common chunk between all libraries.</li>
</ol>
<p>We will then measure for both the small and bigger libs:</p>
<ul>
<li>the time taken to generate the library build</li>
<li>the time taken in development mode to react to some changes</li>
<li>the generated bundle size</li>
</ul>
<p>In that part we won't use Bun, microbundle, tsup or Typescript because they are only able to build a library.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setup-1">Setup<a class="hash-link" aria-label="Direct link to Setup" title="Direct link to Setup" href="https://tonai.github.io/blog/posts/bundlers-comparison#setup-1">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="esbuild-1">esbuild<a class="hash-link" aria-label="Direct link to esbuild" title="Direct link to esbuild" href="https://tonai.github.io/blog/posts/bundlers-comparison#esbuild-1">​</a></h4>
<p>We use the following commands to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">esbuild src/*.tsx </span><span class="token parameter variable" style="color:#36acaa">--bundle</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--outdir</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">public/dist </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--define:process.env.NODE_ENV</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">\</span><span class="token punctuation" style="color:#393A34">\</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">"production</span><span class="token punctuation" style="color:#393A34">\</span><span class="token punctuation" style="color:#393A34">\</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">" </span><span class="token parameter variable" style="color:#36acaa">--sourcemap</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">external </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token parameter variable" style="color:#36acaa">--minify</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--format</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">esm </span><span class="token parameter variable" style="color:#36acaa">--splitting</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And the following command for the development mode:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">esbuild src/*.tsx </span><span class="token parameter variable" style="color:#36acaa">--bundle</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--outdir</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">public/dist </span><span class="token parameter variable" style="color:#36acaa">--watch</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--servedir</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">public</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="parcel-1">Parcel<a class="hash-link" aria-label="Direct link to Parcel" title="Direct link to Parcel" href="https://tonai.github.io/blog/posts/bundlers-comparison#parcel-1">​</a></h4>
<p>We use the following commands to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">parcel build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And the following command for the development mode:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">parcel</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="rollup-1">Rollup<a class="hash-link" aria-label="Direct link to Rollup" title="Direct link to Rollup" href="https://tonai.github.io/blog/posts/bundlers-comparison#rollup-1">​</a></h4>
<p>We use the following commands to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rollup </span><span class="token parameter variable" style="color:#36acaa">-c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And the following command for the development mode:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rollup </span><span class="token parameter variable" style="color:#36acaa">-c</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-w</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="vite-1">Vite<a class="hash-link" aria-label="Direct link to Vite" title="Direct link to Vite" href="https://tonai.github.io/blog/posts/bundlers-comparison#vite-1">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vite build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And the following command for the development mode:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vite</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="webpack-1">Webpack<a class="hash-link" aria-label="Direct link to Webpack" title="Direct link to Webpack" href="https://tonai.github.io/blog/posts/bundlers-comparison#webpack-1">​</a></h4>
<p>We use the following command to generate the build:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">webpack</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And the following command for the development mode:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">webpack serve </span><span class="token parameter variable" style="color:#36acaa">--open</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--mode</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">development</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feature-comparison-1">Feature comparison<a class="hash-link" aria-label="Direct link to Feature comparison" title="Direct link to Feature comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#feature-comparison-1">​</a></h3>
<p>Comparison of app bundler features.</p>
<table><thead><tr><th>Bundler</th><th>Multiple entry points</th><th>Inject JS</th><th>Inject CSS</th><th>Dev server</th><th>HMR</th><th>Sourcemaps</th><th>Shared chunks</th></tr></thead><tbody><tr><td>esbuild</td><td>✅</td><td>❌</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td><td>❗①</td></tr><tr><td>Parcel</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Rollup</td><td>❗②</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td><td>❗③</td></tr><tr><td>Vite</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Webpack</td><td>✅</td><td>❗④</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table>
<p><strong>Notes:</strong></p>
<ol>
<li>Only for <code>ESM</code> format.</li>
<li>No wildcard patterns (need to use the <code>glob</code> library).</li>
<li>Not available for <code>UMD</code> or <code>IIFE</code> formats</li>
<li>Inject all entry points in all HTMl files (and that's not what we want).</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bundle-size-comparison-1">Bundle size comparison<a class="hash-link" aria-label="Direct link to Bundle size comparison" title="Direct link to Bundle size comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#bundle-size-comparison-1">​</a></h3>
<p>Comparison of the final app size (for each library).</p>
<p><strong>Small library:</strong></p>
<table><thead><tr><th>Bundler ⯈<br>Library ⯆</th><th>esbuild</th><th>Parcel</th><th>Rollup</th><th>Vite</th><th>Webpack</th></tr></thead><tbody><tr><td>Bun</td><td>140k + 1.5k</td><td>142k + 1.8k</td><td>138k + 1k</td><td>140k + 1.3k</td><td>137k + 2.3k</td></tr><tr><td>esbuild</td><td>140k + 1.2k</td><td>142k + 1.7k</td><td>138k + 1.1k</td><td>140k + 1.1k</td><td>137k + 4.4k</td></tr><tr><td>microbundle</td><td>140k + 0.8k</td><td>142k + 1.3k</td><td>138k + 0.7k</td><td>140k + 0.7k</td><td>137k + 2.3k</td></tr><tr><td>Parcel</td><td>140k + 34k①</td><td>142k + 1.8k</td><td>138k + 34k①</td><td>140k + 34k①</td><td>137k + 37k①</td></tr><tr><td>Rollup</td><td>140k + 1.2k</td><td>142k + 1.7k</td><td>138k + 1.1k</td><td>140k + 1.1k</td><td>137k + 4.4k</td></tr><tr><td>tsup</td><td>140k + 1.2k</td><td>142k + 1.7k</td><td>138k + 1.1k</td><td>140k + 1.1k</td><td>137k + 4.4k</td></tr><tr><td>Typescript</td><td>140k + 0.7k</td><td>142k + 1.3k</td><td>138k + 0.6k</td><td>140k + 0.6k</td><td>137k + 2.3k</td></tr><tr><td>Vite</td><td>140k + 1.2k</td><td>142k + 1.7k</td><td>138k + 1.2k</td><td>140k + 1.2k</td><td>137k + 4.4k</td></tr><tr><td>Webpack</td><td>140k + 34k①</td><td>142k + 34k①</td><td>138k + 34k①</td><td>140k + 34k①</td><td>137k + 37k①</td></tr></tbody></table>
<p><strong>Bigger library:</strong></p>
<table><thead><tr><th>Bundler ⯈<br>Library ⯆</th><th>esbuild</th><th>Parcel</th><th>Rollup</th><th>Vite</th><th>Webpack</th></tr></thead><tbody><tr><td>Bun</td><td>603k + 36k</td><td>672k + 36k</td><td>372k + 24k</td><td>372k + 22k</td><td>599k + 38k</td></tr><tr><td>esbuild</td><td>603k + 37k</td><td>672k + 37k</td><td>372k + 26k</td><td>372k + 23k</td><td>599k + 39k</td></tr><tr><td>microbundle</td><td>603k + 37k</td><td>672k + 37k</td><td>372k + 26k</td><td>372k + 23k</td><td>599k + 40k</td></tr><tr><td>Parcel</td><td>603k + 34k</td><td>672k + 37k</td><td>372k + 24k</td><td>372k + 21k</td><td>599k + 37k</td></tr><tr><td>Rollup</td><td>603k + 37k</td><td>672k + 38k</td><td>372k + 27k</td><td>372k + 24k</td><td>599k + 40k</td></tr><tr><td>tsup</td><td>603k + 37k</td><td>672k + 37k</td><td>372k + 26k</td><td>372k + 23k</td><td>599k + 39k</td></tr><tr><td>Typescript</td><td>603k + 41k</td><td>672k + 43k</td><td>372k + 30k</td><td>372k + 27k</td><td>599k + 43k</td></tr><tr><td>Vite</td><td>603k + 35k</td><td>672k + 35k</td><td>372k + 24k</td><td>372k + 22k</td><td>599k + 38k</td></tr><tr><td>Webpack</td><td>603k + 105k①</td><td>672k + 106k①</td><td>372k + 801k①</td><td>372k + 319k①</td><td>599k + 107k①</td></tr></tbody></table>
<p><strong>Notes:</strong></p>
<ol>
<li>No tree-shaking.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="performance-comparison-1">Performance comparison<a class="hash-link" aria-label="Direct link to Performance comparison" title="Direct link to Performance comparison" href="https://tonai.github.io/blog/posts/bundlers-comparison#performance-comparison-1">​</a></h3>
<p>Comparison of the time taken to generate the app bundle (Build), or to refresh the development environment when the code changes (Dev).</p>
<p><strong>Small library:</strong></p>
<table><thead><tr><th>Bundler</th><th>Build</th><th>Dev</th></tr></thead><tbody><tr><td>esbuild</td><td>~300ms</td><td>~10ms</td></tr><tr><td>Parcel</td><td>~900ms①</td><td>~10ms</td></tr><tr><td>Rollup</td><td>~15s</td><td>~1s</td></tr><tr><td>Vite</td><td>~1.2s</td><td>~10ms</td></tr><tr><td>Webpack</td><td>~7s</td><td>~500ms</td></tr></tbody></table>
<p><strong>Bigger library:</strong></p>
<table><thead><tr><th>Bundler</th><th>Build</th><th>Dev</th></tr></thead><tbody><tr><td>esbuild</td><td>~700ms</td><td>~500ms</td></tr><tr><td>Parcel</td><td>~1.2s①</td><td>~1.2s</td></tr><tr><td>Rollup</td><td>~1m35s</td><td>Out of memory</td></tr><tr><td>Vite</td><td>~5.5s</td><td>~20ms</td></tr><tr><td>Webpack</td><td>~24s</td><td>~1.6s</td></tr></tbody></table>
<p><strong>Notes:</strong></p>
<ol>
<li>With cache</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tonai.github.io/blog/posts/bundlers-comparison#conclusion">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-a-library">Building a library<a class="hash-link" aria-label="Direct link to Building a library" title="Direct link to Building a library" href="https://tonai.github.io/blog/posts/bundlers-comparison#building-a-library">​</a></h3>
<p>Here is my personal ranking for the best library bundler:</p>
<ol>
<li><strong>Vite:</strong> Vite is now a well known solution for building apps, but I was really surprised that it can also handle building libraries really well. So well in fact I put it in the first place because there is no downside.</li>
<li><strong>tsup:</strong> A nice solution to build a library. CSS support is still experimental, so use it with caution if you have some, but for our cases the results are really great.</li>
<li><strong>esbuild:</strong> esbuild is a solution that creates bundles in a blink of an eye and supports a lot of features. It can be a really good solution for building a library (just don't forget to generate the definition files if you want them).</li>
<li><strong>microbundle:</strong> microbundle cannot handle images but it generate really small bundles (at a cost of some time...). I would probably recommend it if you want to bundle your JS/TS library to be directly used in the browser (not for a library you want to publish on npm).</li>
<li><strong>Typescript:</strong> Not really a bundler, but it has the big advantage to not add any additional dependency to your project. It can be a real solution for JS/TS only projects, but you probably want to build a pure ESM package in that case (see <a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c" target="_blank" rel="noopener noreferrer">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a>).</li>
<li><strong>Parcel:</strong> Parcel is a nice "magical" solution and it can be a real good solution for someone who want a pug and play solution. But I feel like I don't have control over what's happening so I am a little reluctant to use it for bundling a library.</li>
<li><strong>Rollup:</strong> Rollup is a nice bundler for libraries, but at the price of some configuration that is not always obvious. I would probably prefer another bundler (like Vite that is built on top of Rollup for example).</li>
<li><strong>Bun:</strong> Bun is a promising solution, but I wouldn't recommend it now for bundling an app as it lacks some key features. Let's keep an eye on it in the future.</li>
<li><strong>Webpack:</strong> Webpack is probably the oldest bundler and it is still here, but the tree-shaking problem I encountered makes I would not use it to bundle a library.</li>
</ol>
<p>I wouldn't recommend using <code>Bun</code> or <code>Webpack</code> to bundle a library but all the others are ok (some with upsides or downsides depending on what you are bundling).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-an-app">Building an app<a class="hash-link" aria-label="Direct link to Building an app" title="Direct link to Building an app" href="https://tonai.github.io/blog/posts/bundlers-comparison#building-an-app">​</a></h3>
<p>Here is my personal ranking for the best app bundler:</p>
<ol>
<li><strong>Vite:</strong> Again first, but it is really close with Parcel. Here the time taken to update the app in dev mode make the difference as it scales really well with Vite, and I prefer here to have better dev performance than build performance because we spent much more time in development than building the app for production.</li>
<li><strong>Parcel:</strong> No configuration and really great default presets makes Parcel a really good bundler for an app. It can even make the tree-shaking of a Parcel built library works (that does not work with other app bundler). But it is still feels like a "magical" solution and that's also a reason why I personally prefer <code>Vite</code>.</li>
<li><strong>Webpack:</strong> Do not use webpack for bundling a library but it's ok to use to bundle an app. Still it won't be my primary choice as the configuration is not easy, you can have some cases where it won't fit well (as in our example) and the performances are far beyond <code>Parcel</code> and <code>Vite</code>.</li>
<li><strong>esbuild:</strong> esbuild can be used to bundle an app, but it is not really fitted for that especially regarding the dev mode, better use <code>esbuild</code> for bundling a library.</li>
<li><strong>Rollup:</strong> Like <code>esbuild</code>, but even worse. Do not use <code>Rollup</code> to bundle an app.</li>
</ol>
<p>In that case I wouldn't recommend <code>esbuild</code> or <code>Rollup</code> as they lack a real good developer experience, chose <code>vite</code> or <code>Parcel</code> depending on your preferences.<br>
<code>webpack</code> can still be used but as low performances compared to <code>vite</code> and <code>Parcel</code>.</p>]]></content>
        <author>
            <name>Tony Cabaye</name>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="bundler" term="bundler"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The best React UI library]]></title>
        <id>https://tonai.github.io/blog/posts/react-ui-libraries</id>
        <link href="https://tonai.github.io/blog/posts/react-ui-libraries"/>
        <updated>2024-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This article compares different React component libraries to help choose the best for your project.]]></summary>
        <content type="html"><![CDATA[
<p>The React community stands out as one of the largest, but navigating through the multitude of libraries to find the right one that truly adds value to your business can be a challenging task.</p>
<p>This article aims to facilitate this process by undertaking a comparison of various React component libraries, aiding you in selecting the most suitable UI toolkit for your project.</p>
<p>To conduct this comparison, we will go through the following steps:</p>
<ol>
<li>Initially, we'll compile an extensive list of React libraries that are potential candidates for the comparison.</li>
<li>Next, we'll gather statistics related to popularity, usage, and other relevant metrics.</li>
<li>Following that, we'll define a set of components that we intend to evaluate in each library.</li>
<li>Lastly, we'll compare the generated bundle size, performances and assess the licensing details of each library.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="libraries">Libraries<a class="hash-link" aria-label="Direct link to Libraries" title="Direct link to Libraries" href="https://tonai.github.io/blog/posts/react-ui-libraries#libraries">​</a></h2>
<p>Here is a list of libraries that may be suitable for our case. We can categorize them accordingly:</p>
<ul>
<li>UI libraries: reusable and configurable components<!-- -->
<ul>
<li><a href="https://mui.com/" target="_blank" rel="noopener noreferrer">MUI</a> (paid version available)</li>
<li><a href="https://ant.design/" target="_blank" rel="noopener noreferrer">Ant-design</a></li>
<li><a href="https://chakra-ui.com/" target="_blank" rel="noopener noreferrer">Chakra</a></li>
<li><a href="https://react-bootstrap.netlify.app/" target="_blank" rel="noopener noreferrer">React bootstrap</a></li>
<li><a href="https://blueprintjs.com/" target="_blank" rel="noopener noreferrer">Blueprint</a></li>
<li><a href="https://mantine.dev/" target="_blank" rel="noopener noreferrer">Mantine</a></li>
<li><a href="https://react.fluentui.dev/" target="_blank" rel="noopener noreferrer">Fluent UI</a></li>
<li><a href="https://react.semantic-ui.com/" target="_blank" rel="noopener noreferrer">Semantic UI React</a></li>
<li><a href="https://evergreen.segment.com/" target="_blank" rel="noopener noreferrer">Evergreen</a></li>
<li><a href="https://reactstrap.github.io/" target="_blank" rel="noopener noreferrer">reactstrap</a></li>
<li><a href="https://nextui.org/" target="_blank" rel="noopener noreferrer">Next UI</a></li>
<li><a href="https://v2.grommet.io/" target="_blank" rel="noopener noreferrer">Grommet</a></li>
<li><a href="https://rebass-v3.vercel.app/" target="_blank" rel="noopener noreferrer">Rebass</a></li>
<li><a href="https://carbondesignsystem.com/developing/frameworks/react/" target="_blank" rel="noopener noreferrer">Carbon</a></li>
<li><a href="https://theme-ui.com/" target="_blank" rel="noopener noreferrer">ThemeUI</a></li>
<li><a href="https://primereact.org/" target="_blank" rel="noopener noreferrer">PrimeReact</a></li>
<li><a href="https://mdbootstrap.com/docs/react/" target="_blank" rel="noopener noreferrer">MDB</a> (paid version available)</li>
<li><a href="https://adminkit.io/" target="_blank" rel="noopener noreferrer">adminkit</a> (paid version available)</li>
<li><a href="https://park-ui.com/" target="_blank" rel="noopener noreferrer">Park UI</a></li>
<li><a href="https://designrevision.com/downloads/shards-react/" target="_blank" rel="noopener noreferrer">Shards</a> (paid version available)</li>
<li><a href="https://digia.online/react-foundation-docs/" target="_blank" rel="noopener noreferrer">Foundation</a></li>
<li><a href="https://plainadmin.com/" target="_blank" rel="noopener noreferrer">PlainAdmin</a> (paid version available)</li>
</ul>
</li>
<li>Headless libraries: components that come without styling, but with all the functionalities<!-- -->
<ul>
<li><a href="https://ui.shadcn.com/" target="_blank" rel="noopener noreferrer">shadcn-ui/ui</a></li>
<li><a href="https://daisyui.com/" target="_blank" rel="noopener noreferrer">Daisy UI</a></li>
<li><a href="https://headlessui.com/" target="_blank" rel="noopener noreferrer">Headless UI</a></li>
<li><a href="https://www.radix-ui.com/" target="_blank" rel="noopener noreferrer">Radix</a></li>
<li><a href="https://react-spectrum.adobe.com/react-aria/" target="_blank" rel="noopener noreferrer">React Aria</a></li>
<li><a href="https://ark-ui.com/" target="_blank" rel="noopener noreferrer">Ark UI</a></li>
<li><a href="https://tailwindui.com/" target="_blank" rel="noopener noreferrer">Tailwind UI</a> (not free)</li>
</ul>
</li>
<li>Admin libraries: components that connect to the backend and manage all CRUD (Create, Read, Update, Delete) operations<!-- -->
<ul>
<li><a href="https://marmelab.com/react-admin/" target="_blank" rel="noopener noreferrer">React-admin</a> (paid version available)</li>
<li><a href="https://refine.dev/" target="_blank" rel="noopener noreferrer">Refine</a> (paid version available)</li>
<li><a href="https://adminjs.co/" target="_blank" rel="noopener noreferrer">adminJS</a> (paid version available)</li>
<li><a href="https://retool.com/" target="_blank" rel="noopener noreferrer">Retool</a> (not free)</li>
</ul>
</li>
</ul>
<p>While I've made an effort to include a diverse selection of libraries, it's possible that I've overlooked some. This list is not exhaustive, but it serves as our initial foundation for the upcoming steps.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="statistics">Statistics<a class="hash-link" aria-label="Direct link to Statistics" title="Direct link to Statistics" href="https://tonai.github.io/blog/posts/react-ui-libraries#statistics">​</a></h2>
<p>Below are the statistics for the libraries, accurate as of January 29, 2024:</p>
<table><thead><tr><th>Libraries</th><th>Components</th><th>Stars</th><th>Issues</th><th>PR</th><th>weekly dl</th><th>created</th><th>last commit</th></tr></thead><tbody><tr><td><a href="https://github.com/mui/material-ui" target="_blank" rel="noopener noreferrer">MUI</a></td><td>~74</td><td>90.5k</td><td>1.6k</td><td>221</td><td>3.5M</td><td>18/08/2014</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener noreferrer">Ant-design</a></td><td>~74</td><td>89.1k</td><td>1k</td><td>69</td><td>1.3M</td><td>24/04/2015</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/shadcn-ui/ui" target="_blank" rel="noopener noreferrer">shadcn-ui/ui</a></td><td>~46</td><td>46.4k</td><td>851</td><td>288</td><td>57k</td><td>04/01/2023</td><td>28/01/2024</td></tr><tr><td><a href="https://github.com/chakra-ui/chakra-ui" target="_blank" rel="noopener noreferrer">Chakra UI</a></td><td>~62</td><td>35.9k</td><td>229</td><td>62</td><td>534k</td><td>17/08/2019</td><td>25/01/2024</td></tr><tr><td><a href="https://github.com/saadeghi/daisyui" target="_blank" rel="noopener noreferrer">Daisy UI</a></td><td>~55</td><td>28.7k</td><td>52</td><td>6</td><td>263k</td><td>28/11/2020</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/marmelab/react-admin" target="_blank" rel="noopener noreferrer">React-admin</a></td><td>-</td><td>23.5k</td><td>81</td><td>19</td><td>58k</td><td>13/07/2016</td><td>26/01/2024</td></tr><tr><td><a href="https://github.com/tailwindlabs/headlessui" target="_blank" rel="noopener noreferrer">Headless UI</a></td><td>~10</td><td>23.4k</td><td>21</td><td>2</td><td>1.6M</td><td>16/09/2020</td><td>28/01/2024</td></tr><tr><td><a href="https://github.com/mantinedev/mantine" target="_blank" rel="noopener noreferrer">Mantine</a></td><td>~118</td><td>23.2k</td><td>40</td><td>9</td><td>291k</td><td>07/01/2021</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/react-bootstrap/react-bootstrap" target="_blank" rel="noopener noreferrer">React bootstrap</a></td><td>~39</td><td>22.1k</td><td>134</td><td>47</td><td>1.9M</td><td>27/12/2013</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/palantir/blueprint" target="_blank" rel="noopener noreferrer">Blueprint</a></td><td>~66</td><td>20.3k</td><td>642</td><td>35</td><td>202k</td><td>25/10/2016</td><td>25/01/2024</td></tr><tr><td><a href="https://github.com/refinedev/refine" target="_blank" rel="noopener noreferrer">Refine</a></td><td>-</td><td>20.2k</td><td>41</td><td>23</td><td>15k</td><td>20/01/2021</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/nextui-org/nextui" target="_blank" rel="noopener noreferrer">Next UI</a></td><td>~38</td><td>18k</td><td>239</td><td>57</td><td>65k</td><td>22/04/2021</td><td>05/01/2024</td></tr><tr><td><a href="https://github.com/microsoft/fluentui" target="_blank" rel="noopener noreferrer">Fluent UI</a></td><td>~67</td><td>17.3k</td><td>493</td><td>201</td><td>191k</td><td>06/06/2016</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/radix-ui/primitives" target="_blank" rel="noopener noreferrer">Radix</a></td><td>~36</td><td>13.3k</td><td>379</td><td>70</td><td>1.3M</td><td>19/06/2020</td><td>25/09/2023</td></tr><tr><td><a href="https://github.com/Semantic-Org/Semantic-UI-React" target="_blank" rel="noopener noreferrer">Semantic UI React</a></td><td>~49</td><td>13.1k</td><td>172</td><td>21</td><td>261k</td><td>19/06/2015</td><td>30/12/2023</td></tr><tr><td><a href="https://github.com/segmentio/evergreen" target="_blank" rel="noopener noreferrer">Evergreen</a></td><td>~35</td><td>12.3k</td><td>40</td><td>37</td><td>12k</td><td>30/07/2017</td><td>21/06/2023</td></tr><tr><td><a href="https://github.com/adobe/react-spectrum" target="_blank" rel="noopener noreferrer">React Aria</a></td><td>~37</td><td>10.9k</td><td>554</td><td>58</td><td>16k</td><td>13/09/2019</td><td>27/01/2024</td></tr><tr><td><a href="https://github.com/reactstrap/reactstrap" target="_blank" rel="noopener noreferrer">reactstrap</a></td><td>~29</td><td>10.6k</td><td>246</td><td>53</td><td>497k</td><td>19/02/2016</td><td>20/01/2024</td></tr><tr><td><a href="https://github.com/grommet/grommet" target="_blank" rel="noopener noreferrer">Grommet</a></td><td>~82</td><td>8.3k</td><td>266</td><td>44</td><td>24k</td><td>24/03/2015</td><td>27/01/2024</td></tr><tr><td><a href="https://github.com/rebassjs/rebass" target="_blank" rel="noopener noreferrer">Rebass</a></td><td>~8</td><td>7.9k</td><td>46</td><td>51</td><td>53k</td><td>11/02/2015</td><td>03/08/2021</td></tr><tr><td><a href="https://github.com/SoftwareBrothers/adminjs" target="_blank" rel="noopener noreferrer">adminJS</a></td><td>-</td><td>7.7k</td><td>135</td><td>17</td><td>22k</td><td>23/11/2018</td><td>24/01/2024</td></tr><tr><td><a href="https://github.com/carbon-design-system/carbon" target="_blank" rel="noopener noreferrer">Carbon</a></td><td>~41</td><td>7.3k</td><td>489</td><td>42</td><td>54k</td><td>13/03/2017</td><td>26/01/2024</td></tr><tr><td><a href="https://github.com/system-ui/theme-ui" target="_blank" rel="noopener noreferrer">ThemeUI</a></td><td>~36</td><td>5.2k</td><td>50</td><td>8</td><td>74k</td><td>03/04/2019</td><td>24/01/2024</td></tr><tr><td><a href="https://github.com/primefaces/primereact" target="_blank" rel="noopener noreferrer">PrimeReact</a></td><td>~89</td><td>5.2k</td><td>181</td><td>11</td><td>118k</td><td>16/12/2016</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/chakra-ui/ark" target="_blank" rel="noopener noreferrer">Ark UI</a></td><td>~36</td><td>2.7k</td><td>14</td><td>8</td><td>33k</td><td>26/10/2022</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/mdbootstrap/mdb-react-ui-kit" target="_blank" rel="noopener noreferrer">MDB</a></td><td>~50</td><td>1.4k</td><td>1</td><td>0</td><td>7k</td><td>07/09/2017</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/adminkit/adminkit" target="_blank" rel="noopener noreferrer">adminkit</a></td><td>~60</td><td>1.3k</td><td>0</td><td>0</td><td>5k</td><td>21/03/2020</td><td>08/06/2024</td></tr><tr><td><a href="https://github.com/cschroeter/park-ui" target="_blank" rel="noopener noreferrer">Park UI</a></td><td>~41</td><td>903</td><td>13</td><td>5</td><td>3k</td><td>02/08/2023</td><td>29/01/2024</td></tr><tr><td><a href="https://github.com/DesignRevision/shards-react" target="_blank" rel="noopener noreferrer">Shards</a></td><td>~27</td><td>755</td><td>34</td><td>15</td><td>1k</td><td>27/12/2018</td><td>25/02/2019</td></tr><tr><td><a href="https://github.com/digiaonline/react-foundation" target="_blank" rel="noopener noreferrer">Foundation</a></td><td>~16</td><td>601</td><td>-</td><td>-</td><td>7k</td><td>21/03/2020</td><td>27/01/2023</td></tr><tr><td><a href="https://github.com/PlainAdmin/plain-free-bootstrap-admin-template" target="_blank" rel="noopener noreferrer">PlainAdmin</a></td><td>~159</td><td>321</td><td>0</td><td>1</td><td>-</td><td>30/05/2021</td><td>01/09/2023</td></tr></tbody></table>
<p>Tailwind UI and Retool have no available data as they are not open-source solutions.</p>
<p>Regarding React-admin, Refine, and adminJS, the component count is not provided. This is because, being admin libraries, they primarily facilitate connections to backends rather than supplying individual components.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="components">Components<a class="hash-link" aria-label="Direct link to Components" title="Direct link to Components" href="https://tonai.github.io/blog/posts/react-ui-libraries#components">​</a></h2>
<p>For the comparison we will choose the context of building some <strong>back-office application</strong> with a need for advanced components, so we might be interested in the following:</p>
<ul>
<li>A table component for presenting data</li>
<li>A Date-picker component</li>
<li>A standalone calendar component</li>
<li>A "toast" component (utilized for displaying information or error messages, for instance)</li>
<li>An upload (dropzone) component</li>
</ul>
<p>Additionally, it would be beneficial if the libraries also include:</p>
<ul>
<li>Some charts components</li>
<li>A Rich Text Editor component</li>
<li>A document preview component</li>
</ul>
<p>However, if these are not available, we can consider using dedicated libraries for those purposes.</p>
<p>Here's a table indicating the availability of these components in each library:</p>
<table><thead><tr><th>Libraries</th><th>Table</th><th>Calendar</th><th>Datepicker</th><th>Toast</th><th>Chart</th><th>Doc preview</th><th>Upload</th><th>RTE</th></tr></thead><tbody><tr><td>MUI</td><td><a href="https://mui.com/x/react-data-grid/" target="_blank" rel="noopener noreferrer">✅💵</a></td><td><a href="https://mui.com/x/react-date-pickers/date-picker/" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://mui.com/x/react-date-pickers/date-picker/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://mui.com/material-ui/react-snackbar/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://mui.com/x/react-charts/" target="_blank" rel="noopener noreferrer">✅⏳</a></td><td>❌</td><td><a href="https://mui.com/material-ui/react-button/#file-upload" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td></tr><tr><td>Ant-design</td><td><a href="https://ant.design/components/table" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://ant.design/components/calendar" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://ant.design/components/date-picker" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://ant.design/components/alert" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://charts.ant.design/en" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td><a href="https://ant.design/components/upload" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>shadcn-ui/ui</td><td><a href="https://ui.shadcn.com/docs/components/table" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://ui.shadcn.com/docs/components/calendar" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://ui.shadcn.com/docs/components/date-picker" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://ui.shadcn.com/docs/components/toast" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Chakra UI</td><td><a href="https://chakra-ui.com/docs/components/table" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td><a href="https://chakra-ui.com/docs/components/toast" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Daisy UI</td><td><a href="https://daisyui.com/components/table/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://daisyui.com/components/toast/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Headless UI</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Mantine</td><td><a href="https://ui.mantine.dev/category/tables" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://mantine.dev/dates/calendar/" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://ui.mantine.dev/category/inputs" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://mantine.dev/others/notifications/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://mantine.dev/charts/getting-started/" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td><a href="https://ui.mantine.dev/category/dropzones" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://mantine.dev/others/tiptap/" target="_blank" rel="noopener noreferrer">✅</a></td></tr><tr><td>React bootstrap</td><td><a href="https://react-bootstrap.github.io/components/table/" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td><a href="https://react-bootstrap.github.io/components/toasts/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Blueprint</td><td><a href="https://blueprintjs.com/docs/#table/features" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td><a href="https://blueprintjs.com/docs/#datetime/datepicker" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://blueprintjs.com/docs/#core/components/toast" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Next UI</td><td><a href="https://nextui.org/docs/components/table" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Fluent UI</td><td><a href="https://developer.microsoft.com/en-us/fluentui#/controls/web/detailslist" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://developer.microsoft.com/en-us/fluentui#/controls/web/calendar" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://developer.microsoft.com/en-us/fluentui#/controls/web/datepicker" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://developer.microsoft.com/en-us/fluentui#/controls/web/messagebar" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Radix</td><td>❌</td><td>❌</td><td>❌</td><td><a href="https://www.radix-ui.com/primitives/docs/components/toast" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Semantic UI React</td><td><a href="https://react.semantic-ui.com/collections/table/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://react.semantic-ui.com/collections/message/" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Evergreen</td><td><a href="https://evergreen.segment.com/components/table" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td><a href="https://evergreen.segment.com/components/toaster" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://evergreen.segment.com/components/file-uploader" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>React Aria</td><td><a href="https://react-spectrum.adobe.com/react-aria/Table.html" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://react-spectrum.adobe.com/react-aria/Calendar.html" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://react-spectrum.adobe.com/react-aria/DatePicker.html" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://react-spectrum.adobe.com/react-aria/useToast.html" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://react-spectrum.adobe.com/react-aria/DropZone.html" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>reactstrap</td><td><a href="https://reactstrap.github.io/?path=/docs/components-table--table" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td><a href="https://reactstrap.github.io/?path=/docs/components-toast--toast" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Grommet</td><td><a href="https://v2.grommet.io/datatable" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://v2.grommet.io/calendar" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://v2.grommet.io/dateinput" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://v2.grommet.io/notification" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://v2.grommet.io/datachart" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td><a href="https://v2.grommet.io/fileinput" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>Rebass</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Carbon</td><td><a href="https://carbondesignsystem.com/components/data-table/usage" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td><a href="https://carbondesignsystem.com/components/date-picker/usage/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://carbondesignsystem.com/components/notification/usage/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://carbondesignsystem.com/components/file-uploader/usage/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>ThemeUI</td><td>❌</td><td>❌</td><td>❌</td><td><a href="https://theme-ui.com/components/alert" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>PrimeReact</td><td><a href="https://primereact.org/datatable/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://primereact.org/calendar/" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://primereact.org/calendar/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://primereact.org/toast/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://primereact.org/chart/" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td><a href="https://primereact.org/fileupload/" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://primereact.org/editor/" target="_blank" rel="noopener noreferrer">✅</a></td></tr><tr><td>Ark UI</td><td>❌</td><td><a href="https://ark-ui.com/docs/components/date-picker" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://ark-ui.com/docs/components/date-picker" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://ark-ui.com/docs/components/toast" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://ark-ui.com/docs/components/file-upload" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>MDB</td><td><a href="https://mdbootstrap.com/docs/react/data/datatables/" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://mdbootstrap.com/docs/react/forms/datepicker/" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://mdbootstrap.com/docs/react/forms/datepicker/" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://mdbootstrap.com/docs/react/components/toasts/" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://mdbootstrap.com/docs/react/data/charts/" target="_blank" rel="noopener noreferrer">💵</a></td><td>❌</td><td><a href="https://mdbootstrap.com/docs/react/forms/file/" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://mdbootstrap.com/docs/react/plugins/wysiwyg-editor/" target="_blank" rel="noopener noreferrer">💵</a></td></tr><tr><td>AdminKit</td><td><a href="https://adminkit.io/docs/components/tables/" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td><td>❌</td><td><a href="https://adminkit.io/docs/components/toasts/" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://adminkit.io/docs/charts/bar-chart/" target="_blank" rel="noopener noreferrer">✅💵</a></td><td>❌</td><td><a href="https://adminkit.io/docs/forms/file-upload/" target="_blank" rel="noopener noreferrer">🟠</a></td><td>❌</td></tr><tr><td>Park UI</td><td><a href="https://park-ui.com/docs/panda/components/table" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://park-ui.com/docs/panda/components/date-picker" target="_blank" rel="noopener noreferrer">🟠</a></td><td><a href="https://park-ui.com/docs/panda/components/date-picker" target="_blank" rel="noopener noreferrer">✅</a></td><td><a href="https://park-ui.com/docs/panda/components/toast" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td><td>❌</td><td><a href="https://park-ui.com/docs/panda/components/file-upload" target="_blank" rel="noopener noreferrer">✅</a></td><td>❌</td></tr><tr><td>Shards</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Foundation</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>PlainAdmin</td><td><a href="https://demo.plainadmin.com/datatables" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://demo.plainadmin.com/calendar" target="_blank" rel="noopener noreferrer">💵</a></td><td>❌</td><td>❌</td><td><a href="https://demo.plainadmin.com/chart-js" target="_blank" rel="noopener noreferrer">💵</a></td><td>❌</td><td>❌</td><td><a href="https://demo.plainadmin.com/form-edit" target="_blank" rel="noopener noreferrer">💵</a></td></tr><tr><td>Retool</td><td><a href="https://retool.com/components/table" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/calendar-input" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/date" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/alert" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/chart" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/pdf" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/file-dropzone" target="_blank" rel="noopener noreferrer">💵</a></td><td><a href="https://retool.com/components/rich-text-editor" target="_blank" rel="noopener noreferrer">💵</a></td></tr></tbody></table>
<p>Legend:</p>
<ul>
<li>✅ : OK</li>
<li>❌ : KO</li>
<li>💵 : OK in paid version</li>
<li>🟠 : Moderately OK</li>
<li>⏳ : Planned in the future</li>
</ul>
<p>Then let's calculate a score based on the previous table where ✅=1, 🟠=0.5, 💵=0.5.</p>
<p>We'll then identify and focus on the libraries that score above the average for the next steps.:</p>
<table><thead><tr><th>Libraries</th><th>Score</th><th>Selected</th></tr></thead><tbody><tr><td>PrimeReact</td><td>6.5/8</td><td>✅</td></tr><tr><td>Mantine</td><td>6/8</td><td>✅</td></tr><tr><td>MUI</td><td>5/8</td><td>✅</td></tr><tr><td>Ant-design</td><td>5/8</td><td>✅</td></tr><tr><td>Grommet</td><td>5/8</td><td>✅</td></tr><tr><td>React Aria</td><td>4.5/8</td><td>✅</td></tr><tr><td>Carbon</td><td>4/8</td><td>❌</td></tr><tr><td>Park UI</td><td>4/8</td><td>❌</td></tr><tr><td>Retool</td><td>4/8</td><td>❌</td></tr><tr><td>shadcn-ui/ui</td><td>3.5/8</td><td>❌</td></tr><tr><td>Ark UI</td><td>3.5/8</td><td>❌</td></tr><tr><td>MDB</td><td>3.5/8</td><td>❌</td></tr><tr><td>Blueprint</td><td>3/8</td><td>❌</td></tr><tr><td>Fluent UI</td><td>3/8</td><td>❌</td></tr><tr><td>Evergreen</td><td>2.5/8</td><td>❌</td></tr><tr><td>adminkit</td><td>2.5/8</td><td>❌</td></tr><tr><td>Daisy UI</td><td>2/8</td><td>❌</td></tr><tr><td>PlainAdmin</td><td>2/8</td><td>❌</td></tr><tr><td>Chakra UI</td><td>1.5/8</td><td>❌</td></tr><tr><td>React bootstrap</td><td>1.5/8</td><td>❌</td></tr><tr><td>Semantic UI React</td><td>1.5/8</td><td>❌</td></tr><tr><td>Radix</td><td>1/8</td><td>❌</td></tr><tr><td>reactstrap</td><td>1/8</td><td>❌</td></tr><tr><td>Next UI</td><td>1/8</td><td>❌</td></tr><tr><td>ThemeUI</td><td>0.5/8</td><td>❌</td></tr><tr><td>Headless UI</td><td>0/8</td><td>❌</td></tr><tr><td>Rebass</td><td>0/8</td><td>❌</td></tr><tr><td>Shards</td><td>0/8</td><td>❌</td></tr><tr><td>Foundation</td><td>0/8</td><td>❌</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bundle-size">Bundle size<a class="hash-link" aria-label="Direct link to Bundle size" title="Direct link to Bundle size" href="https://tonai.github.io/blog/posts/react-ui-libraries#bundle-size">​</a></h2>
<p>The bundle size comparison is down to the final six libraries.</p>
<p>Let's review the component table for these remaining libraries:</p>
<table><thead><tr><th>Libraries</th><th>Table</th><th>Cal.</th><th>DateP.</th><th>Toast</th><th>Chart</th><th>Doc preview</th><th>Upload</th><th>RTE</th><th>Score</th></tr></thead><tbody><tr><td>MUI</td><td>✅💵</td><td>🟠</td><td>✅</td><td>✅</td><td>✅⏳</td><td>❌</td><td>🟠</td><td>❌</td><td>5/8</td></tr><tr><td>Ant-design</td><td>✅</td><td>🟠</td><td>✅</td><td>✅</td><td>🟠</td><td>❌</td><td>✅</td><td>❌</td><td>5/8</td></tr><tr><td>Mantine</td><td>✅</td><td>🟠</td><td>✅</td><td>✅</td><td>🟠</td><td>❌</td><td>✅</td><td>✅</td><td>6/8</td></tr><tr><td>React Aria</td><td>✅</td><td>🟠</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td><td>✅</td><td>❌</td><td>4.5/8</td></tr><tr><td>Grommet</td><td>✅</td><td>🟠</td><td>✅</td><td>🟠</td><td>✅</td><td>❌</td><td>✅</td><td>❌</td><td>5/8</td></tr><tr><td>PrimeReact</td><td>✅</td><td>🟠</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td><td>6.5/8</td></tr></tbody></table>
<p>It's notable that each of the libraries features a table, a datepicker, and a toast component.</p>
<p>Now, let's assess the bundle size for these components.</p>
<p>The corresponding code for the comparison is available <a href="https://github.com/Smile-SA/react-ui-libraries-comparison" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>And here are the results:</p>
<table><thead><tr><th>Libraries</th><th>Table only</th><th>Datepicker only</th><th>Toast only</th><th>All 3 components</th></tr></thead><tbody><tr><td>MUI</td><td>665k JS</td><td>468k JS</td><td>235k JS</td><td>826k JS</td></tr><tr><td>Ant-design</td><td>751k JS</td><td>479k JS</td><td>288k JS</td><td>877k JS</td></tr><tr><td>Mantine</td><td>204k JS + 189k CSS</td><td>296k JS + 199k CSS</td><td>194k JS + 190k CSS</td><td>334k JS + 199k CSS</td></tr><tr><td>React Aria</td><td>299k JS</td><td>343k JS</td><td>194k JS</td><td>462k JS</td></tr><tr><td>Grommet</td><td>373k JS</td><td>339k JS</td><td>331k JS</td><td>473k JS</td></tr><tr><td>PrimeReact</td><td>636k JS + 159k CSS</td><td>334k JS + 159k CSS</td><td>312k JS + 159k CSS</td><td>767k JS + 159k CSS</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="performance-evaluation">Performance evaluation<a class="hash-link" aria-label="Direct link to Performance evaluation" title="Direct link to Performance evaluation" href="https://tonai.github.io/blog/posts/react-ui-libraries#performance-evaluation">​</a></h2>
<p>To gauge performance, we've measured the number of times the app (utilizing the three components defined in the previous step) can render within one second.</p>
<p>The technical implementation is outlined as follows:</p>
<ol>
<li>I introduced a counter within a button in the <code>App</code> component, which encompasses all three components.</li>
<li>Upon clicking the button, I record the current time and increment the counter state, initiating a new render of the <code>App</code> component.</li>
<li>Upon completion of the render, a <code>useEffect</code> is triggered, incrementing the counter once more and initiating another render.</li>
<li>After one second, the useEffect ceases to increment the counter, allowing us to retrieve the counter value, indicating the number of renders conducted.</li>
</ol>
<p>The presented figures represent an average based on 10 calculations.</p>
<p>Here are the results, where a higher number indicates better performance:</p>
<table><thead><tr><th>Libraries</th><th>Number of render per second</th></tr></thead><tbody><tr><td>MUI</td><td>~1210</td></tr><tr><td>Ant-design</td><td>~770</td></tr><tr><td>Mantine</td><td>~1650</td></tr><tr><td>React Aria</td><td>~350</td></tr><tr><td>Grommet</td><td>~820</td></tr><tr><td>PrimeReact</td><td>~270</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="license">License<a class="hash-link" aria-label="Direct link to License" title="Direct link to License" href="https://tonai.github.io/blog/posts/react-ui-libraries#license">​</a></h2>
<p>Finally here is the license information for our selected libraries:</p>
<ul>
<li>MUI: MIT</li>
<li>Ant-design: MIT</li>
<li>Mantine: MIT</li>
<li>React Aria: Apache-2.0 license</li>
<li>Grommet: Apache-2.0 license</li>
<li>PrimeReact: MIT</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tonai.github.io/blog/posts/react-ui-libraries#conclusion">​</a></h2>
<p>In conclusion, considering its extensive array of over a hundred components, a commendable score of 6/8, a compact JS bundle size and great performances, <strong>Mantine</strong> emerges as the optimal solution for our specific case.</p>
<p>Moreover, I believe <strong>Mantine</strong> stands out as an excellent choice for any project seeking a dependable UI library, because it also:</p>
<ul>
<li>boasts excellent documentation.</li>
<li>enables customization of every component, providing flexibility when needed.</li>
</ul>]]></content>
        <author>
            <name>Tony Cabaye</name>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="react" term="react"/>
        <category label="library" term="library"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What front-end framework is the fastest ?]]></title>
        <id>https://tonai.github.io/blog/posts/fastest-framework</id>
        <link href="https://tonai.github.io/blog/posts/fastest-framework"/>
        <updated>2023-11-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This article compares different front-end frameworks regarding their performances.]]></summary>
        <content type="html"><![CDATA[
<p>This article is the third installment in a series, which you can access through the following links:</p>
<ol>
<li><a href="https://tonai.github.io/blog/posts/front-end-architecture">How to choose the right front-end architecture?</a></li>
<li><a href="https://tonai.github.io/blog/posts/front-end-frameworks">What frontend framework should you choose?</a></li>
</ol>
<p>So, if you're planning to determine the best front-end framework for your requirements, I recommend reading the preceding articles as well.</p>
<p>In this article, our primary focus will be on comparing the performance of the following frameworks:</p>
<ul>
<li>Client Side Rendering (CSR):<!-- -->
<ul>
<li>Angular</li>
<li>Angular zoneless (<ins>Added on 1st July 2024</ins>)</li>
<li>Preact (<ins>Added on 1st July 2024</ins>)</li>
<li>React</li>
<li>Solid</li>
<li>Vue</li>
</ul>
</li>
<li>Server Side Rendering (SSR):<!-- -->
<ul>
<li>Alpine (<ins>Added on 1st July 2024</ins>)</li>
<li>Angular SSR (<ins>Added on 1st July 2024</ins>)</li>
<li>Astro</li>
<li>Astro + React</li>
<li>Gatsby</li>
<li>Next (app router)</li>
<li>Next (page router)</li>
<li>Nuxt</li>
<li>Qwik</li>
<li>Remix</li>
<li>Sveltekit</li>
</ul>
</li>
</ul>
<p>Throughout the article, we will cover the following topics:</p>
<ul>
<li>Benchmarking the page load times of identical pages implemented in various frameworks.</li>
<li>Evaluating the reactivity performance of these frameworks.</li>
<li>Providing a summary and drawing conclusions regarding the fastest frameworks.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction" href="https://tonai.github.io/blog/posts/fastest-framework#introduction">​</a></h2>
<p>This benchmark focuses on the initial page load speed. When I say "first load," I mean that most frontend frameworks implement frontend routing, which has the advantage of not requiring the download of all assets from the beginning.</p>
<p>However, from a Google ranking perspective, the Lighthouse score is crucial. Thus, making efforts to enhance your Lighthouse score can lead to better conversion rates and improved SEO (Search Engine Optimization).</p>
<p>For the tests, I recreated the old <a href="https://www.smile.eu/fr" target="_blank" rel="noopener noreferrer">https://www.smile.eu/fr</a> homepage (that has been now rebranded), as I wanted to use a page with existing content. The current Lighthouse score of that page is far from perfect, which aligns with the purpose of this comparison.</p>
<p>The main objective here is to compare the different frameworks and see if one outperforms the others.</p>
<p>You can access all the code in <a href="https://github.com/Smile-SA/frontend-frameworks-comparison" target="_blank" rel="noopener noreferrer">this repository</a>.</p>
<p>Now, let's delve into the results of each scenario, utilizing the most optimal approach to serve the content for a fair comparison.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="glossary">Glossary<a class="hash-link" aria-label="Direct link to Glossary" title="Direct link to Glossary" href="https://tonai.github.io/blog/posts/fastest-framework#glossary">​</a></h2>
<ul>
<li><strong>FCP</strong>: First Contentful Paint - First Contentful Paint marks the time when the first text or image is painted.</li>
<li><strong>LCP</strong>: Largest Contentful Paint - Largest Contentful Paint marks the time when the largest text or image is painted.</li>
<li><strong>TBT</strong>: Total Blocking Time - The sum of all time periods between FCP and Time to Interactive, when a task length exceeds 50ms, expressed in milliseconds.</li>
<li><strong>CLS</strong>: Cumulative Layout Shift - Cumulative Layout Shift measures the movement of visible elements within the viewport.</li>
<li><strong>SI</strong>: Speed Index - Speed Index shows how quickly the contents of a page are visibly populated.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lighthouse-benchmark">Lighthouse benchmark<a class="hash-link" aria-label="Direct link to Lighthouse benchmark" title="Direct link to Lighthouse benchmark" href="https://tonai.github.io/blog/posts/fastest-framework#lighthouse-benchmark">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="full-static-page">Full static page<a class="hash-link" aria-label="Direct link to Full static page" title="Direct link to Full static page" href="https://tonai.github.io/blog/posts/fastest-framework#full-static-page">​</a></h3>
<p>The page has no interaction at all, it's only HTML, CSS, fonts, images...Etc.</p>
<p>Results (with Chrome 125.0.6422.76):</p>
<table><thead><tr><th>Frameworks</th><th>Type</th><th>Score</th></tr></thead><tbody><tr><td>Alpine</td><td>SSR</td><td>83</td></tr><tr><td>Angular</td><td>CSR</td><td>80</td></tr><tr><td>Angular SSR</td><td>SSR</td><td>82</td></tr><tr><td>Astro</td><td>SSR</td><td>81</td></tr><tr><td>Astro + React</td><td>SSR</td><td>82</td></tr><tr><td>Gatsby</td><td>SSR</td><td>81</td></tr><tr><td>Next (app router)</td><td>SSR</td><td>81</td></tr><tr><td>Next (page router)</td><td>SSR</td><td>81</td></tr><tr><td>Nuxt</td><td>SSR</td><td>80</td></tr><tr><td>Preact</td><td>CSR</td><td>81</td></tr><tr><td>Qwik</td><td>SSR</td><td>82</td></tr><tr><td>React</td><td>CSR</td><td>82</td></tr><tr><td>Remix</td><td>SSR</td><td>82</td></tr><tr><td>Solid</td><td>CSR</td><td>82</td></tr><tr><td>Sveltekit</td><td>SSR</td><td>82</td></tr><tr><td>Vue</td><td>CSR</td><td>81</td></tr></tbody></table>
<p>We can observe that the Lighthouse scores range from 80 to 83, indicating that they are all quite close in value. The Lighthouse score can sometimes exhibit slight variations in multiple test batches, making it challenging to definitively declare one framework as superior to another.</p>
<p>Now, let's shift our focus to the page size. In all these frameworks, the CSS, image, and font sizes remain consistent, differing only in terms of document and JavaScript sizes.</p>
<p>Here is a chart illustrating these differences (sorted by total size):</p>
<p><img decoding="async" loading="lazy" alt="Page size" src="https://tonai.github.io/blog/assets/images/page-size-fsp-ef4f25a253f60812f4581f409e544547.png" width="604" height="375" class="img_ev3q"></p>
<p>Here are some notable points to consider:</p>
<ul>
<li>The document size of CSR (Client Side Rendering) frameworks (Angular, React, Solid, and Vue) is minimal, at only around 1kB, because it's mostly empty due to the content being generated on the client side.</li>
<li>Certain frameworks, such as Astro, Qwik, Remix, and Sveltekit, do not include any JS files.</li>
<li>The JS size appears to be 0 for some cases, but in reality, there is still some JavaScript embedded in the document. This is why the document size varies among SSR (Server Side Rendering) frameworks.</li>
</ul>
<p>With these observations in mind, we are ready to delve deeper into our analysis.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="page-with-little-interactions">Page with little interactions<a class="hash-link" aria-label="Direct link to Page with little interactions" title="Direct link to Page with little interactions" href="https://tonai.github.io/blog/posts/fastest-framework#page-with-little-interactions">​</a></h3>
<p>In this particular scenario, I introduced some JavaScript interactions exclusively in the header and the footer of the page.</p>
<p>Results (with Chrome 125.0.6422.76):</p>
<table><thead><tr><th>Frameworks</th><th>Type</th><th>Score</th></tr></thead><tbody><tr><td>Alpine</td><td>SSR</td><td>82</td></tr><tr><td>Angular</td><td>CSR</td><td>80</td></tr><tr><td>Angular SSR</td><td>SSR</td><td>82</td></tr><tr><td>Astro</td><td>SSR</td><td>82</td></tr><tr><td>Astro + React</td><td>SSR</td><td>80</td></tr><tr><td>Gatsby</td><td>SSR</td><td>82</td></tr><tr><td>Next (app router)</td><td>SSR</td><td>81</td></tr><tr><td>Next (page router)</td><td>SSR</td><td>81</td></tr><tr><td>Nuxt</td><td>SSR</td><td>80</td></tr><tr><td>Preact</td><td>CSR</td><td>82</td></tr><tr><td>Qwik</td><td>SSR</td><td>83</td></tr><tr><td>React</td><td>CSR</td><td>82</td></tr><tr><td>Remix</td><td>SSR</td><td>81</td></tr><tr><td>Solid</td><td>CSR</td><td>81</td></tr><tr><td>Sveltekit</td><td>SSR</td><td>82</td></tr><tr><td>Vue</td><td>CSR</td><td>80</td></tr></tbody></table>
<p>Like in the previous scenario, the Lighthouse scores range from 80 to 83 with no real differences.</p>
<p>Is it the same for the document and JavaScript sizes? Here is again a new chart illustrating these differences:</p>
<p><img decoding="async" loading="lazy" alt="Page size" src="https://tonai.github.io/blog/assets/images/page-size-pwli-60e4ba818fbd45b3296c4ee071476ee2.png" width="604" height="375" class="img_ev3q"></p>
<p>Here are some noteworthy observations:</p>
<ul>
<li>The document size of CSR (Client Side Rendering) frameworks remains the same as in the previous scenario, and this pattern will persist in all upcoming scenarios.</li>
<li>Qwik continues to be the only framework that ships zero JS files, a characteristic that will also persist in all future scenarios. This is the result of their unique approach to hydration, where the necessary JS is loaded on demand as users interact with the page (for more details, you can refer to the <a href="https://tonai.github.io/blog/posts/front-end-architecture">previous article</a> or <a href="https://qwik.builder.io/" target="_blank" rel="noopener noreferrer">their websites</a>).</li>
<li>Astro (without React) remains light since it doesn't ship any framework (only 2kB of JS).</li>
</ul>
<p>The reason for the scores potentially not showing significant differences might be the relatively low number of interactions on the page. To address this, more interactions will be added in the next scenario.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="page-with-more-interactions">Page with more interactions<a class="hash-link" aria-label="Direct link to Page with more interactions" title="Direct link to Page with more interactions" href="https://tonai.github.io/blog/posts/fastest-framework#page-with-more-interactions">​</a></h3>
<p>In this scenario, every part of the page has become interactive, and a Leaflet map is loaded in the middle of the page. It's important to note that the data for the map is not fetched but is instead statically stored within the JavaScript.</p>
<p>Results (with Chrome 125.0.6422.76):</p>
<table><thead><tr><th>Frameworks</th><th>Type</th><th>Score</th></tr></thead><tbody><tr><td>Alpine</td><td>SSR</td><td>80</td></tr><tr><td>Angular</td><td>CSR</td><td>80</td></tr><tr><td>Angular SSR</td><td>SSR</td><td>81</td></tr><tr><td>Astro</td><td>SSR</td><td>81</td></tr><tr><td>Astro + React</td><td>SSR</td><td>81</td></tr><tr><td>Gatsby</td><td>SSR</td><td>82</td></tr><tr><td>Next (app router)</td><td>SSR</td><td>81</td></tr><tr><td>Next (page router)</td><td>SSR</td><td>80</td></tr><tr><td>Nuxt</td><td>SSR</td><td>82</td></tr><tr><td>Preact</td><td>CSR</td><td>81</td></tr><tr><td>Qwik</td><td>SSR</td><td>83</td></tr><tr><td>React</td><td>CSR</td><td>82</td></tr><tr><td>Remix</td><td>SSR</td><td>80</td></tr><tr><td>Solid</td><td>CSR</td><td>80</td></tr><tr><td>Sveltekit</td><td>SSR</td><td>82</td></tr><tr><td>Vue</td><td>CSR</td><td>80</td></tr></tbody></table>
<p>In this scenario, the Lighthouse scores have maybe slightly decreased overall, but still no real differences.</p>
<p>To potentially witness a more substantial difference between the frameworks, we may need to introduce data fetching from a backend. This is the aim of the upcoming scenario.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="page-with-interactions-and-data-fetching">Page with interactions and data fetching<a class="hash-link" aria-label="Direct link to Page with interactions and data fetching" title="Direct link to Page with interactions and data fetching" href="https://tonai.github.io/blog/posts/fastest-framework#page-with-interactions-and-data-fetching">​</a></h3>
<p>In this scenario, I've built upon the previous one by incorporating five API calls to fetch data:</p>
<ul>
<li>Four API calls are utilized to load data for the content, with the data fetched on the server for SSR frameworks and on the client for CSR frameworks.</li>
<li>One API call is dedicated to loading the data for the map, and this call is always executed on the client side.</li>
<li>To mimic a slower API response, I've introduced a 1-second delay for each API call.</li>
<li>The four API calls for content are independent of one another, enabling them to be fetched in parallel.</li>
<li>Whenever possible, I tested both SSR and SSG rendering techniques for SSR frameworks.</li>
</ul>
<p>Results (with Chrome 125.0.6422.76):</p>
<table><thead><tr><th>Frameworks</th><th>Type</th><th>Score</th></tr></thead><tbody><tr><td>Alpine</td><td>SSR</td><td>83</td></tr><tr><td>Angular</td><td>CSR</td><td>80</td></tr><tr><td>Angular SSR</td><td>SSR</td><td>81</td></tr><tr><td>Astro</td><td><em>SSG</em></td><td>80</td></tr><tr><td>Astro + React</td><td><em>SSG</em></td><td>82</td></tr><tr><td>Gatsby</td><td>SSR</td><td>81</td></tr><tr><td>Gatsby</td><td><em>SSG</em></td><td>82</td></tr><tr><td>Next (app router)</td><td>SSR</td><td>82</td></tr><tr><td>Next (app router)</td><td><em>SSG</em></td><td>82</td></tr><tr><td>Next (page router)</td><td>SSR</td><td>80</td></tr><tr><td>Next (page router)</td><td><em>SSG</em></td><td>82</td></tr><tr><td>Nuxt</td><td><em>SSG</em></td><td>81</td></tr><tr><td>Preact</td><td>CSR</td><td>81</td></tr><tr><td>Qwik</td><td><em>SSG</em></td><td>83</td></tr><tr><td>React</td><td>CSR</td><td>81</td></tr><tr><td>Remix</td><td>SSR</td><td>79</td></tr><tr><td>Solid</td><td>CSR</td><td>81</td></tr><tr><td>Sveltekit</td><td><em>SSG</em></td><td>82</td></tr><tr><td>Vue</td><td>CSR</td><td>80</td></tr></tbody></table>
<p>In the latest scenario, despite the introduction of loading, the Lighthouse scores still haven't notably decreased compared to the previous scenario. This observation holds true for both CSR, where data fetching occurs on the client, and SSR, where data fetching is done on the server, even when the API responses are delayed by 1 second (resulting in a longer perceived loading time for users).</p>
<p>This leads to an important conclusion: Lighthouse scores primarily focus on frontend performance and are less dependent on the efficiency of your APIs.</p>
<p>In the upcoming scenario, I've decided to introduce a significant computational task in the JavaScript to hopefully yield more discernible differences in performance.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="page-with-long-calculation">Page with long calculation<a class="hash-link" aria-label="Direct link to Page with long calculation" title="Direct link to Page with long calculation" href="https://tonai.github.io/blog/posts/fastest-framework#page-with-long-calculation">​</a></h3>
<p>In the latest scenario, a lengthy computation task has been added, which involves a very long loop that takes approximately 10 seconds to complete on my computer.</p>
<p>This extended processing time will likely reveal substantial differences in performance.</p>
<p>It's essential to note that this computation is executed on the client for CSR frameworks and on the server for SSR frameworks (without hydration when possible).</p>
<p>Results (with Chrome 125.0.6422.76):</p>
<table><thead><tr><th>Frameworks</th><th>Type</th><th>Score</th></tr></thead><tbody><tr><td>Alpine</td><td>SSR</td><td><strong>56</strong></td></tr><tr><td>Angular</td><td>CSR</td><td><strong>27</strong></td></tr><tr><td>Angular SSR</td><td>SSR</td><td><strong>41</strong></td></tr><tr><td>Astro</td><td><em>SSG</em></td><td>80</td></tr><tr><td>Astro + React</td><td><em>SSG</em></td><td>81</td></tr><tr><td>Gatsby</td><td>SSR</td><td><strong>72</strong></td></tr><tr><td>Next (app router)</td><td>SSR</td><td><strong>73</strong></td></tr><tr><td>Next (page router)</td><td>SSR</td><td><strong>71</strong></td></tr><tr><td>Nuxt</td><td><em>SSG</em></td><td>82</td></tr><tr><td>Preact</td><td>CSR</td><td><strong>41</strong></td></tr><tr><td>Qwik</td><td><em>SSG</em></td><td>83</td></tr><tr><td>React</td><td>CSR</td><td><strong>42</strong></td></tr><tr><td>Remix</td><td>SSR</td><td><strong>69</strong></td></tr><tr><td>Solid</td><td>CSR</td><td><strong>27</strong></td></tr><tr><td>Sveltekit</td><td><em>SSG</em></td><td><strong>44</strong></td></tr><tr><td>Vue</td><td>CSR</td><td><strong>27</strong></td></tr></tbody></table>
<p>In this scenario, we indeed begin to witness significant differences:</p>
<ul>
<li>CSR frameworks exhibit lower scores, ranging from 27 to 42, with variations across different test batches, underscoring tangible distinctions between these frameworks.</li>
<li>In SSR cases, there's about a 10-point drop in scores due to an increase in the SI metric. This suggests that a prolonged TTFB (Time To First Byte) can have a minor impact on the Lighthouse score compared to the time spent on the client side.</li>
<li>SSG frameworks, apart from Sveltekit, do not experience any significant impact from the calculation since it's performed during the build process. However, Sveltekit's score is similar to CSR frameworks, as it primarily does the long calculation on the client side.</li>
<li>Remix cannot perform SSG, but Gatsby and Next can, which means that in some instances, these frameworks can transition to SSG to mitigate the impact of the lengthy calculation (which will then be done at build time).</li>
</ul>
<p>This example effectively demonstrates that having a long calculation on the server is generally more favorable than having this calculation in the client. However, in most real-life projects, such an exact scenario may not occur. The most common scenario where time is consumed by JavaScript is during the rendering of your components. Let's proceed to the next scenario.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="page-with-long-hydration">Page with long hydration<a class="hash-link" aria-label="Direct link to Page with long hydration" title="Direct link to Page with long hydration" href="https://tonai.github.io/blog/posts/fastest-framework#page-with-long-hydration">​</a></h3>
<p>In this scenario, the objective is to have the time consumed during the rendering process, which primarily affects SSR frameworks. In most of these frameworks, rendering takes place on the server side. However, during page load, the rendering occurs again on the client side, a process known as hydration.</p>
<p>This scenario aims to illustrate the impact of rendering time on the performance of SSR frameworks when hydration is involved.</p>
<p>SSR framework results (with Chrome 125.0.6422.76):</p>
<table><thead><tr><th>Frameworks</th><th>Type</th><th>Score</th></tr></thead><tbody><tr><td>Alpine (same as previous)</td><td>SSR</td><td>56</td></tr><tr><td>Angular SSR (same as previous)</td><td>SSR</td><td>41</td></tr><tr><td>Astro (same as previous)</td><td><em>SSG</em></td><td><strong>80</strong></td></tr><tr><td>Astro + React (using <code>client:load</code>)</td><td><em>SSG</em></td><td>40</td></tr><tr><td>Astro + React (using <code>client:visible</code>)</td><td><em>SSG</em></td><td><strong>82</strong></td></tr><tr><td>Gatsby</td><td>SSR</td><td>42</td></tr><tr><td>Next (app router, same as previous)</td><td>SSR</td><td><strong>73</strong></td></tr><tr><td>Next (page router)</td><td>SSR</td><td>41</td></tr><tr><td>Nuxt</td><td><em>SSG</em></td><td>46</td></tr><tr><td>Qwik</td><td><em>SSG</em></td><td><strong>83</strong></td></tr><tr><td>Remix</td><td>SSR</td><td>41</td></tr><tr><td>Sveltekit</td><td><em>SSG</em></td><td>43</td></tr></tbody></table>
<p>In this scenario, several important observations can be made:</p>
<ul>
<li>The impact of hydration is evident and significantly reduces the scores for both SSR and SSG rendering techniques to a level similar to that of CSR frameworks. This is because the lengthy calculation occurs solely on the client for SSG, while for SSR, it happens on both the server and the client.</li>
<li>Astro without React uses plain JS, avoiding the need for hydration, resulting in no significant impact on the Lighthouse score. it does not mean that Astro can magically avoid any long calculation. If you have a long calculation that happen on the client part, it will affect the score like any other CSR frameworks, but if you have done the calculation on the server, there will be no hydration, thus this calculation will only happen on the server.</li>
<li>The <code>client:visible</code> directive in Astro can be used to lazily load framework components. This means that the long calculation only occurs when the component enters the viewport, having no detrimental effect on the Lighthouse score (in this case).</li>
<li>In the case of Next (using the app router), the lengthy calculation is placed inside a React server component, which is not hydrated. As a result, the calculation takes place exclusively on the server side, minimizing the impact of component hydration.</li>
<li>Qwik's "resumability" technique ensures that no calculation occurs on the client side because it has already been executed on the server, further optimizing performance.</li>
</ul>
<p>These findings shed light on the different approaches and their implications for frontend framework performance under varying circumstances.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reactivity-benchmark">Reactivity benchmark<a class="hash-link" aria-label="Direct link to Reactivity benchmark" title="Direct link to Reactivity benchmark" href="https://tonai.github.io/blog/posts/fastest-framework#reactivity-benchmark">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="goal">Goal<a class="hash-link" aria-label="Direct link to Goal" title="Direct link to Goal" href="https://tonai.github.io/blog/posts/fastest-framework#goal">​</a></h3>
<p>In this section, our focus will be on benchmarking the reactivity of the framework.</p>
<p>This activity takes place after the page has loaded, for instance, when a user interacts with the page by clicking a button to display something. Our aim is to prevent lengthy tasks, those that take more than 50 milliseconds, in order to ensure the page feels smooth.</p>
<p>The objective of this benchmark is to gauge the framework's performance in handling this task, specifically how much time it takes for the framework to update the DOM in response to a state change.</p>
<p>One way to assess this cost is by calculating the time the framework requires for a simple task, such as incrementing a counter. In this case, the majority of the time spent on this action is, in fact, the time taken by the framework to re-render and update the DOM, while the cost of the custom code part (the increment operation) is negligible.</p>
<p>However, measuring and comparing this can be challenging because this action is very quick. A simpler way to make comparisons is to count the number of times a framework can render within one second.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="technical-implementation">Technical implementation<a class="hash-link" aria-label="Direct link to Technical implementation" title="Direct link to Technical implementation" href="https://tonai.github.io/blog/posts/fastest-framework#technical-implementation">​</a></h3>
<p>The challenging aspect here is updating the application state and allowing the framework to perform rendering, and then triggering a new state update when the rendering is completed, and so on. Due to the single-threaded nature of JavaScript, it's not possible to update the state within a loop. In such a scenario, the framework will likely render only when the loop is finished, updating the DOM with the final version of the counter. This isn't what we want because we want to count the number of renders.</p>
<p>Our goal is to effectively see the counter increase, as shown in this animation:</p>
<p><img decoding="async" loading="lazy" alt="Counter animation" src="https://tonai.github.io/blog/assets/images/counter-54b9a09710d61f5b9bf1945ea7b3ff33.gif" width="284" height="443" class="img_ev3q"></p>
<p>We also want to use the same technique for all frameworks to ensure a fair comparison. For example, it's not possible to use React's useEffect to trigger a new increment after rendering is complete.</p>
<p>One way to accomplish this is by using something like <code>setTimeout(increment, 0)</code>. Calling setTimeout postpones the execution of the increment function until the main thread is available. However, the problem with setTimeout is that it's not quick enough; it takes about 4 milliseconds to trigger a new increment.</p>
<p>You can see this in the Google Devtools Performance tab record:</p>
<p><img decoding="async" loading="lazy" alt="Performances with setTimeout" src="https://tonai.github.io/blog/assets/images/setTimeout-4e6b742d1db2b63fa86ffd33e7f1fd0e.png" width="1600" height="200" class="img_ev3q"></p>
<p>What we would like is something similar to the node setImmediate function. We can achieve a similar effect using MessageChannel. Here is the performance tab record demonstrating all the updates:</p>
<p><img decoding="async" loading="lazy" alt="Performances with MessageChannel" src="https://tonai.github.io/blog/assets/images/postMessage-e4d2d346864c57f4ebaf5878a3c22afe.png" width="1600" height="179" class="img_ev3q"></p>
<p>With this solution, we are now prepared to compare the reactivity of different frameworks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="results">Results<a class="hash-link" aria-label="Direct link to Results" title="Direct link to Results" href="https://tonai.github.io/blog/posts/fastest-framework#results">​</a></h3>
<p>I didn't implement the reactivity benchmark for all frameworks because Next, Gatsby, Remix, and others all rely on React. I only implemented it when the frontend framework was something other than React.</p>
<p>So, here's the ranking of how many renders these frameworks can perform in one second, from best to worst:</p>
<table><thead><tr><th>Framework</th><th style="text-align:right">Render</th></tr></thead><tbody><tr><td>Native JS (Astro)</td><td style="text-align:right">~206200</td></tr><tr><td>Solid</td><td style="text-align:right">~186500</td></tr><tr><td>Svelte</td><td style="text-align:right">~152200</td></tr><tr><td>Qwik</td><td style="text-align:right">~92500</td></tr><tr><td>Vue</td><td style="text-align:right">~61700</td></tr><tr><td>Alpine.js</td><td style="text-align:right">~60600</td></tr><tr><td>Angular with signals</td><td style="text-align:right">~48900</td></tr><tr><td>React optimized</td><td style="text-align:right">~31200</td></tr><tr><td>React non optimized</td><td style="text-align:right">~2500</td></tr><tr><td>Preact</td><td style="text-align:right">~1800</td></tr><tr><td>Angular</td><td style="text-align:right">~1100</td></tr></tbody></table>
<p>Let's calculate some score based on the maximum score:</p>
<table><thead><tr><th>Framework</th><th style="text-align:right">Score</th></tr></thead><tbody><tr><td>Native JS (Astro)</td><td style="text-align:right">100%</td></tr><tr><td>Solid</td><td style="text-align:right">90.4%</td></tr><tr><td>Svelte</td><td style="text-align:right">73.8%</td></tr><tr><td>Qwik</td><td style="text-align:right">44.9%</td></tr><tr><td>Vue</td><td style="text-align:right">29.9%</td></tr><tr><td>Alpine.js</td><td style="text-align:right">29.4%</td></tr><tr><td>Angular with signals</td><td style="text-align:right">23.7%</td></tr><tr><td>React optimized</td><td style="text-align:right">15.1%</td></tr><tr><td>React non optimized</td><td style="text-align:right">1.2%</td></tr><tr><td>Preact</td><td style="text-align:right">0.9%</td></tr><tr><td>Angular</td><td style="text-align:right">0.5%</td></tr></tbody></table>
<p>Here are some noteworthy points:</p>
<ul>
<li>It's quite reassuring to see that native JavaScript implementation is the top performer.</li>
<li>The Solid reactivity system is designed with a focus on speed (you can learn more about it here: <a href="https://www.solidjs.com/guides/reactivity" target="_blank" rel="noopener noreferrer">https://www.solidjs.com/guides/reactivity</a>)</li>
<li>Svelte, while not exactly a framework, compiles to native JavaScript in an efficient manner.</li>
<li>React's performance can vary significantly, from being the worst-performing framework to being more than 10 times better, depending on how you define the state in your application.</li>
<li>Angular's results are subpar due to the necessity of reintegrating messages from the MessageChannel into the Angular flow using NgZone, but the new signal-based reactivity system performs well.</li>
</ul>
<p>You can also refer to <a href="https://krausest.github.io/js-framework-benchmark/current.html" target="_blank" rel="noopener noreferrer">this benchmark page</a>, which compares various frameworks in different scenarios, but the overall conclusions remain consistent.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary" href="https://tonai.github.io/blog/posts/fastest-framework#summary">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="global">Global<a class="hash-link" aria-label="Direct link to Global" title="Direct link to Global" href="https://tonai.github.io/blog/posts/fastest-framework#global">​</a></h3>
<p>Here are some general points to consider before delving into the conclusions for each framework:</p>
<ul>
<li>Lighthouse primarily records frontend performance, and backend requests have a minimal impact on the score.</li>
<li>This implies that you must focus on optimizing your frontend if you want to improve the lighthouse score.</li>
<li>But having a page that takes a long time to be served by a backend is also a bad experience for your user. You may need to use other tools than lighthouse to record and report and then ensure that your server is fast to provides the best user experience.</li>
<li>Overall, SSR (Server-Side Rendering) frameworks perform slightly better than CSR (Client-Side Rendering) frameworks, although the difference is not substantial (depending on how much calculation you can so on the backend side).</li>
<li>This suggests that CSR frameworks are still viable options when building applications like Back-Office systems, intranets, extranets, connected apps, and so on (but do not use CSR frameworks if SEO is a concern).</li>
<li>While there are no significant variations among CSR frameworks in the page load benchmark, there are notable differences in terms of reactivity.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qwik">Qwik<a class="hash-link" aria-label="Direct link to Qwik" title="Direct link to Qwik" href="https://tonai.github.io/blog/posts/fastest-framework#qwik">​</a></h3>
<p>Taking the results into account, the Qwik framework appears to be performing exceptionally well, especially when you aggregate all the Lighthouse scenario scores in one place:</p>
<table><thead><tr><th>Scenario</th><th>Qwik</th></tr></thead><tbody><tr><td>Full static page</td><td>82</td></tr><tr><td>Page with little interactions</td><td>83</td></tr><tr><td>Page with interactions</td><td>83</td></tr><tr><td>Page with interactions and data fetching</td><td>83</td></tr><tr><td>Page with long calculation</td><td>83</td></tr><tr><td>Page with long hydration</td><td>83</td></tr></tbody></table>
<p>The framework's ability to compensate for suboptimal programming is quite impressive.</p>
<p>Although the framework's reactivity system is one of the fastest (scoring 44.9%).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="astro">Astro<a class="hash-link" aria-label="Direct link to Astro" title="Direct link to Astro" href="https://tonai.github.io/blog/posts/fastest-framework#astro">​</a></h3>
<p>Astro is also notable because of its island architecture, which allows you to choose the framework you want for specific components where it's most advantageous.</p>
<p>Thanks to Astro directives, such as <code>client:visible</code>, you can load framework parts only when they are required.</p>
<p>Here are the consolidated results for Astro with React when utilizing this directive:</p>
<table><thead><tr><th>Scenario</th><th>Astro</th></tr></thead><tbody><tr><td>Full static page</td><td>82</td></tr><tr><td>Page with little interactions</td><td>80</td></tr><tr><td>Page with interactions</td><td>81</td></tr><tr><td>Page with interactions and data fetching</td><td>82</td></tr><tr><td>Page with long calculation</td><td>81</td></tr><tr><td>Page with long hydration</td><td>82</td></tr></tbody></table>
<p>The distinction between Astro and Qwik lies in the fact that, for Astro, the extended hydration process will still occur on the frontend when the component enters the viewport.</p>
<p>You may also encounter a challenge when it comes to enabling multiple island components to communicate with each other in Astro. However, this issue can be resolved using tools like Astro nano stores or a state library such as Redux, among others.</p>
<p>It's important to note that the reactivity of the framework will depend on the specific framework you choose in combination with Astro.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="next--gatsy--remix--nuxt">Next / Gatsy / Remix / Nuxt<a class="hash-link" aria-label="Direct link to Next / Gatsy / Remix / Nuxt" title="Direct link to Next / Gatsy / Remix / Nuxt" href="https://tonai.github.io/blog/posts/fastest-framework#next--gatsy--remix--nuxt">​</a></h3>
<p>Here's a summary of the scores for Next, Gatsby, Remix, and Nuxt:</p>
<table><thead><tr><th>Scenario</th><th>Next (app routing)</th><th>Next (page routing)</th><th>Gatsby</th><th>Remix</th><th>Nuxt</th></tr></thead><tbody><tr><td>Full static page</td><td>81</td><td>81</td><td>81</td><td>82</td><td>80</td></tr><tr><td>Page with little interactions</td><td>81</td><td>81</td><td>82</td><td>81</td><td>80</td></tr><tr><td>Page with interactions</td><td>81</td><td>80</td><td>82</td><td>80</td><td>82</td></tr><tr><td>Page with interactions and data fetching</td><td>82 (ssr) / 82 (ssg)</td><td>80 (ssr) / 82 (ssg)</td><td>81 (ssr) / 82 (ssg)</td><td>79 (ssr)</td><td>81 (ssg)</td></tr><tr><td>Page with long calculation</td><td>73 (ssr)</td><td>71 (ssr)</td><td>72 (ssr)</td><td>69 (ssr)</td><td>82 (ssg)</td></tr><tr><td>Page with long hydration</td><td>73</td><td>41</td><td>42</td><td>41</td><td>46</td></tr></tbody></table>
<p>Based on these results, we can conclude that in most scenarios, these frameworks exhibit similar performance levels.</p>
<p>Next stands out when it uses app routing (and, consequently, React Server Component) and performs better in situations where a server component needs to perform complex calculations. However, in practice, such cases might not be very common because these calculations often rely on frontend state and need to be recalculated on the client side.</p>
<p>Nonetheless, if you encounter performance issues, utilizing Next with React Server Side Rendering could be a favorable choice. It not only has the potential to improve performance in specific scenarios but also reduces the overall number of hydrated components. Therefore, if you're looking to employ React with Server Side Rendering, Next is likely one of the top choices.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sveltekit--angular-ssr">SvelteKit / Angular SSR<a class="hash-link" aria-label="Direct link to SvelteKit / Angular SSR" title="Direct link to SvelteKit / Angular SSR" href="https://tonai.github.io/blog/posts/fastest-framework#sveltekit--angular-ssr">​</a></h3>
<p>Lighthouse Score results for SvelteKit and Angular SSR:</p>
<table><thead><tr><th>Scenario</th><th>SvelteKit</th><th>Angular SSR</th></tr></thead><tbody><tr><td>Full static page</td><td>82</td><td>82</td></tr><tr><td>Page with little interactions</td><td>82</td><td>82</td></tr><tr><td>Page with interactions</td><td>82</td><td>81</td></tr><tr><td>Page with interactions and data fetching</td><td>82</td><td>81</td></tr><tr><td>Page with long calculation</td><td>44 (ssg)</td><td>41</td></tr><tr><td>Page with long hydration</td><td>46</td><td>41</td></tr></tbody></table>
<p>I was somewhat taken aback by the outcomes. In general, they are slightly inferior to those of other frameworks, because they aren't capable of serializing extensive calculations typically reserved for the backend. While this may not occur often, the option remains unavailable.</p>
<p>However, the SvelteKit's reactivity system is highly effective, scoring 73.8%.</p>
<p>For Angular you might want to choose to use Signals if you want to build your app for speed (scoring 23.7% with signals versus 0.5% without them).</p>
<p>In that case, it is quite comparable to the frameworks mentioned above.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="alpinejs">Alpine.js<a class="hash-link" aria-label="Direct link to Alpine.js" title="Direct link to Alpine.js" href="https://tonai.github.io/blog/posts/fastest-framework#alpinejs">​</a></h3>
<p>Lighthouse Score results for Alpine.js:</p>
<table><thead><tr><th>Scenario</th><th>Alpine.js</th></tr></thead><tbody><tr><td>Full static page</td><td>80</td></tr><tr><td>Page with little interactions</td><td>80</td></tr><tr><td>Page with interactions</td><td>80</td></tr><tr><td>Page with interactions and data fetching</td><td>80</td></tr><tr><td>Page with long calculation</td><td>27</td></tr></tbody></table>
<p>It appears that Alpine.js scores slightly above other frameworks, though the performance is still quite similar overall.</p>
<p>Alpine.js remains a great solution, especially if your pages are generated by another backend tool (such as a PHP CMS) and you don't want to use a headless solution.</p>
<p>Additionally, the framework has a solid reactivity score of 29.4%.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="react--vue--angular--solid--preact">React / Vue / Angular / Solid / Preact<a class="hash-link" aria-label="Direct link to React / Vue / Angular / Solid / Preact" title="Direct link to React / Vue / Angular / Solid / Preact" href="https://tonai.github.io/blog/posts/fastest-framework#react--vue--angular--solid--preact">​</a></h3>
<p>Here's a summary of the scores for these frameworks:</p>
<table><thead><tr><th>Scenario</th><th>Angular</th><th>Preact</th><th>React</th><th>Solid</th><th>Vue</th></tr></thead><tbody><tr><td>Full static page</td><td>80</td><td>81</td><td>82</td><td>82</td><td>81</td></tr><tr><td>Page with little interactions</td><td>80</td><td>82</td><td>82</td><td>81</td><td>80</td></tr><tr><td>Page with interactions</td><td>80</td><td>81</td><td>82</td><td>80</td><td>80</td></tr><tr><td>Page with interactions and data fetching</td><td>80</td><td>81</td><td>81</td><td>81</td><td>80</td></tr><tr><td>Page with long calculation</td><td>27</td><td>41</td><td>42</td><td>27</td><td>27</td></tr></tbody></table>
<p>It's difficult to identify any significant differences here; the results are quite consistent.</p>
<p>The only notable exception is that Solid boasts the fastest reactive system, earning a score of 90.4% and establishing itself as the top reactive CRS framework.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tonai.github.io/blog/posts/fastest-framework#conclusion">​</a></h2>
<p>In conclusion, there are relatively few differences, making the choice of framework less critical for performance.</p>
<p>Furthermore, if you encounter performance issues, you're likely to find solutions within the framework you're using.</p>
<p>Nonetheless, here are the final results:</p>
<ul>
<li><strong>Qwik</strong> stands out with its impressive resumable hydration system, as it appears to be optimized by default. This could be an excellent choice for projects that require building everything from scratch and don't heavily rely on external libraries. It's worth noting that the Qwik ecosystem and community are relatively new.</li>
<li><strong>Astro</strong> offers strong performance and allows you to select your preferred framework. However, its island architecture might not be suitable for all projects. Consider using it if you only need interactivity in specific parts of your website.</li>
<li><strong>Next</strong> would likely be the default choice for projects that don't fall into the aforementioned categories.</li>
<li><strong>Solid</strong> boasts the best reactivity, but like Qwik, its ecosystem is still emerging. It might be worth exploring in scenarios where SEO isn't a primary concern (though SolidStart offers SSR, it's still in beta) and where you don't heavily rely on external libraries.</li>
</ul>]]></content>
        <author>
            <name>Tony Cabaye</name>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="frameworks" term="frameworks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What front-end framework should you choose ?]]></title>
        <id>https://tonai.github.io/blog/posts/front-end-frameworks</id>
        <link href="https://tonai.github.io/blog/posts/front-end-frameworks"/>
        <updated>2023-09-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After digging for the right front-end architecture, this article helps you make your choice for the right front-end framework.]]></summary>
        <content type="html"><![CDATA[<p>This article serves as a follow-up to my previous article on front-end architecture, which can be found <a href="https://tonai.github.io/blog/posts/front-end-architecture">here</a>. While it's not necessary to have read the previous article before reading this one, if you're looking to make the best choice for selecting your frontend framework, it would be beneficial to take a look.</p>
<p>In this article, our main focus will be on effectively comparing different frameworks by examining various data, statistics, surveys, and more.</p>
<p>Here's an outline of what we'll cover:</p>
<ol>
<li>We'll begin by exploring client-side technologies such as React, Vue.js, and others (referred to as frontend frameworks).</li>
<li>Next, we'll shift our attention to server-side technologies, which are often decided for their Server-Side Rendering capability (referred to as rendering frameworks).</li>
<li>Lastly, we'll present some excellent contenders for frontend frameworks that you might consider.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="frontend-frameworks">Frontend frameworks<a class="hash-link" aria-label="Direct link to Frontend frameworks" title="Direct link to Frontend frameworks" href="https://tonai.github.io/blog/posts/front-end-frameworks#frontend-frameworks">​</a></h2>
<p>Frontend frameworks are used to facilitate the development of intricate frontend applications.</p>
<p>These frameworks can be employed independently in the Single-Page Application (SPA) architecture or in conjunction with rendering frameworks in the Server-Side Rendered Single-Page Application (SSRSPA) architecture.</p>
<p>Now, let's delve into the available data concerning these frameworks (you will also find jQuery in the list I added for comparison).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-statistics">GitHub statistics<a class="hash-link" aria-label="Direct link to GitHub statistics" title="Direct link to GitHub statistics" href="https://tonai.github.io/blog/posts/front-end-frameworks#github-statistics">​</a></h3>
<p>Here are some statistics retrieved from GitHub that primarily indicate the popularity and interest for each framework. The statistics are sorted in descending order based on the number of stars (as of September 12, 2023):</p>
<table><thead><tr><th>Framework</th><th>Star</th><th>Fork</th><th>Watch</th><th>Contributors</th><th>Last commit</th><th>Created</th></tr></thead><tbody><tr><td><a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">React</a></td><td>213k</td><td>44.7k</td><td>6.7k</td><td>1629</td><td>12/09/2023</td><td>24/05/2013</td></tr><tr><td><a href="https://github.com/vuejs/core" target="_blank" rel="noopener noreferrer">Vue.js v3</a> (<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener noreferrer">v2</a>)</td><td>40.1k (205k)</td><td>7.3k (34.4k)</td><td>765<br>(6k)</td><td>407<br>(358)</td><td>06/09/2023 (27/04/2023)</td><td>12/06/2018 (29/07/2013)</td></tr><tr><td><a href="https://github.com/angular/angular" target="_blank" rel="noopener noreferrer">Angular</a></td><td>90.1k</td><td>24.2k</td><td>3k</td><td>1774</td><td>11/09/2023</td><td>18/09/2014</td></tr><tr><td><a href="https://github.com/sveltejs/svelte" target="_blank" rel="noopener noreferrer">Svelte</a></td><td>72.4k</td><td>4k</td><td>869</td><td>635</td><td>04/09/2023</td><td>20/11/2016</td></tr><tr><td><a href="https://github.com/jquery/jquery" target="_blank" rel="noopener noreferrer">jQuery</a></td><td>57.8k</td><td>20.9k</td><td>3.2k</td><td>284</td><td>12/09/2023</td><td>03/04/2009</td></tr><tr><td><a href="https://github.com/preactjs/preact" target="_blank" rel="noopener noreferrer">Preact</a></td><td>35k</td><td>1.9k</td><td>407</td><td>300</td><td>11/09/2023</td><td>11/09/2015</td></tr><tr><td><a href="https://github.com/solidjs/solid" target="_blank" rel="noopener noreferrer">Solid.js</a></td><td>28.9k</td><td>802</td><td>217</td><td>150</td><td>11/09/2023</td><td>24/04/2018</td></tr><tr><td><a href="https://github.com/jashkenas/backbone" target="_blank" rel="noopener noreferrer">Backbone</a></td><td>28k</td><td>5.5k</td><td>1.3k</td><td>324</td><td>11/08/2023</td><td>30/09/2010</td></tr><tr><td><a href="https://github.com/alpinejs/alpine" target="_blank" rel="noopener noreferrer">Alpine.js</a></td><td>24.8k</td><td>1.1k</td><td>213</td><td>242</td><td>11/09/2023</td><td>28/11/2019</td></tr><tr><td><a href="https://github.com/emberjs/ember.js" target="_blank" rel="noopener noreferrer">Ember</a></td><td>22.4k</td><td>4.3k</td><td>868</td><td>820</td><td>08/09/2023</td><td>25/05/2011</td></tr><tr><td><a href="https://github.com/lit/lit" target="_blank" rel="noopener noreferrer">Lit</a></td><td>15.7k</td><td>814</td><td>207</td><td>160</td><td>12/09/2023</td><td>29/06/2017</td></tr><tr><td><a href="https://github.com/Tencent/omi" target="_blank" rel="noopener noreferrer">Omi</a></td><td>12.7k</td><td>1.3k</td><td>346</td><td>90</td><td>11/09/2023</td><td>31/05/2015</td></tr><tr><td><a href="https://github.com/ionic-team/stencil" target="_blank" rel="noopener noreferrer">Stencil</a></td><td>11.9k</td><td>757</td><td>183</td><td>191</td><td>12/09/2023</td><td>15/02/2017</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-star-history">GitHub star history<a class="hash-link" aria-label="Direct link to GitHub star history" title="Direct link to GitHub star history" href="https://tonai.github.io/blog/posts/front-end-frameworks#github-star-history">​</a></h3>
<p>By utilizing <a href="https://star-history.com/" target="_blank" rel="noopener noreferrer">Star history</a>, we can generate an image illustrating the GitHub star history for various frameworks over time. This image provides us with valuable insights into the trends and levels of popularity (indicated by the shape of the curve, particularly rapid increases) for these frameworks:</p>
<p><img decoding="async" loading="lazy" alt="Star history graph for frontend frameworks" src="https://tonai.github.io/blog/assets/images/star-history-frontend-93446affe59e711aa34ff422ca8aad54.png" width="852" height="562" class="img_ev3q"></p>
<p>It's important to note that the star count for Vue.js version 2 appears to be decreasing due to a repository change for version 3. As a result, the older version (v2) is not experiencing significant growth in popularity, while the newer version (v3) is steadily increasing but has not yet reached the same level as the v2 version. It is not advisable to simply combine the star counts for v2 and v3, as there is likely some overlap or intersection between the two.</p>
<p><a href="https://star-history.com/#facebook/react&amp;vuejs/vue&amp;angular/angular&amp;sveltejs/svelte&amp;jquery/jquery&amp;preactjs/preact&amp;jashkenas/backbone&amp;solidjs/solid&amp;alpinejs/alpine&amp;Date" target="_blank" rel="noopener noreferrer">Click here</a> to view an updated graph based on the date you're reading this article (you will need to provide a GitHub token).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="google-trends">Google trends<a class="hash-link" aria-label="Direct link to Google trends" title="Direct link to Google trends" href="https://tonai.github.io/blog/posts/front-end-frameworks#google-trends">​</a></h3>
<p>By utilizing <a href="https://trends.google.com/" target="_blank" rel="noopener noreferrer">Google trends</a>, we can generate an image that illustrates the search trends on Google. This image provides valuable insights into the relative popularity and interest over time for various frameworks based on search queries:</p>
<p><img decoding="async" loading="lazy" alt="Google trends graph for frontend frameworks" src="https://tonai.github.io/blog/assets/images/trends-frontend-en-fb843f45e137f36b32a54c9d4c900fbf.png" width="1158" height="681" class="img_ev3q"></p>
<p><a href="https://trends.google.com/trends/explore?date=all&amp;q=%2Fm%2F012l1vxv,%2Fg%2F11c0vmgx5d,%2Fg%2F11c6w0ddw9,%2Fg%2F11c5t00h04,%2Fm%2F0268gyp&amp;hl=en" target="_blank" rel="noopener noreferrer">Click here</a> to view an updated graph based on the date you're reading this article.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="npm-trends">npm trends<a class="hash-link" aria-label="Direct link to npm trends" title="Direct link to npm trends" href="https://tonai.github.io/blog/posts/front-end-frameworks#npm-trends">​</a></h3>
<p>By referring to <a href="https://npmtrends.com/" target="_blank" rel="noopener noreferrer">npm trends</a>, we can obtain the number of downloads for various frameworks, providing insights into their usage. The download statistics indicate the level of adoption and utilization for each framework:</p>
<p><img decoding="async" loading="lazy" alt="npm trends graph for frontend frameworks" src="https://tonai.github.io/blog/assets/images/npm-frontend-b3b416c07ac4a20ef06cf75473f9a662.png" width="1284" height="499" class="img_ev3q"></p>
<p><a href="https://npmtrends.com/@angular/core-vs-@stencil/core-vs-backbone-vs-jquery-vs-lit-vs-preact-vs-react-vs-solid-js-vs-svelte-vs-vue" target="_blank" rel="noopener noreferrer">Click here</a> to view an updated graph based on the date you're reading this article.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stack-overflow-2023-survey">Stack Overflow 2023 survey<a class="hash-link" aria-label="Direct link to Stack Overflow 2023 survey" title="Direct link to Stack Overflow 2023 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#stack-overflow-2023-survey">​</a></h3>
<p><a href="https://survey.stackoverflow.co/2023/#section-most-popular-technologies-web-frameworks-and-technologies" target="_blank" rel="noopener noreferrer">Here</a> is a survey result from Stack Overflow about popular technologies and how much they are admired (people that have used and want to continue using it) or desired (people that want to use it) by developers.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Used</th><th>Desired</th><th>Admired</th></tr></thead><tbody><tr><td>React</td><td>40.58%</td><td>35.25%</td><td>62.61%</td></tr><tr><td>jQuery</td><td>21.98%</td><td>8.59%</td><td>32.89%</td></tr><tr><td>Angular</td><td>17.46%</td><td>13.86%</td><td>50.75%</td></tr><tr><td>Vue.js</td><td>16.38%</td><td>17.42%</td><td>57.87%</td></tr><tr><td>AngularJS</td><td>7.21%</td><td>4.21%</td><td>19.22%</td></tr><tr><td>Svelte</td><td>6.62%</td><td>14.18%</td><td>74.50%</td></tr><tr><td>Solid.js</td><td>1.36%</td><td>4.93%</td><td>71.71%</td></tr><tr><td>Lit</td><td>0.68%</td><td>0.92%</td><td>55.71%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="state-of-js-2022-survey">State of JS 2022 survey<a class="hash-link" aria-label="Direct link to State of JS 2022 survey" title="Direct link to State of JS 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#state-of-js-2022-survey">​</a></h3>
<p><a href="https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from State of JS showing the percentage of people that knows some frameworks, have used them, are interested in them or who would use them again.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Awareness</th><th>Usage</th><th>Interest</th><th>Retention</th></tr></thead><tbody><tr><td>React</td><td>99.9%</td><td>81.8%</td><td>47.2%</td><td>83.0%</td></tr><tr><td>Angular</td><td>99.6%</td><td>48.8%</td><td>20.4%</td><td>42.7%</td></tr><tr><td>Vue.js</td><td>99.5%</td><td>46.2%</td><td>50.7%</td><td>77.4%</td></tr><tr><td>Svelte</td><td>93.6%</td><td>21.2%</td><td>69.8%</td><td>89.7%</td></tr><tr><td>Ember</td><td>77.0%</td><td>7.5%</td><td>13.4%</td><td>17.1%</td></tr><tr><td>Preact</td><td>76.1%</td><td>12.8%</td><td>35.6%</td><td>74.3%</td></tr><tr><td>Solid.js</td><td>65.9%</td><td>6.3%</td><td>65.7%</td><td>90.9%</td></tr><tr><td>Alpine.js</td><td>51.6%</td><td>6.2%</td><td>32.7%</td><td>76.1%</td></tr><tr><td>Lit</td><td>41.7%</td><td>6.2%</td><td>36.8%</td><td>70.8%</td></tr><tr><td>Stencil</td><td>35.4%</td><td>4.3%</td><td>32.7%</td><td>62.6%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="state-of-frontend-2022-survey">State of Frontend 2022 survey<a class="hash-link" aria-label="Direct link to State of Frontend 2022 survey" title="Direct link to State of Frontend 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#state-of-frontend-2022-survey">​</a></h3>
<p><a href="https://tsh.io/state-of-frontend/#over-the-past-year-which-of-the-following-frameworks-have-you-used-and-liked" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from State of Frontend showing the percentage of people that used and liked or disliked some framework and the percentage of people who would like to learn some framework.</p>
<p>We can extract following the information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Liked</th><th>Disliked</th><th>Like to learn</th></tr></thead><tbody><tr><td>React</td><td>76.2%</td><td>25.0%</td><td>16.2%</td></tr><tr><td>Vue.js</td><td>28.9%</td><td>17.0%</td><td>28.1%</td></tr><tr><td>Angular</td><td>22.0%</td><td>51.0%</td><td>8.0%</td></tr><tr><td>Svelte</td><td>16.9%</td><td>4.6%</td><td>49.2%</td></tr><tr><td>Ember</td><td>4.5%</td><td>9.4%</td><td>3.2%</td></tr><tr><td>Backbone</td><td>1.9%</td><td>11.3%</td><td>1.3%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jetbrains-2022-survey">JetBrains 2022 survey<a class="hash-link" aria-label="Direct link to JetBrains 2022 survey" title="Direct link to JetBrains 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#jetbrains-2022-survey">​</a></h3>
<p><a href="https://www.jetbrains.com/lp/devecosystem-2022/javascript/" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from JetBrains showing the percentage of people that use some framework.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Using</th></tr></thead><tbody><tr><td>React</td><td>55%</td></tr><tr><td>Vue.js</td><td>35%</td></tr><tr><td>Angular</td><td>17%</td></tr><tr><td>Angular.js</td><td>7%</td></tr><tr><td>Svelte</td><td>5%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jamstackorg-2022-survey">Jamstack.org 2022 survey<a class="hash-link" aria-label="Direct link to Jamstack.org 2022 survey" title="Direct link to Jamstack.org 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#jamstackorg-2022-survey">​</a></h3>
<p><a href="https://jamstack.org/survey/2022/#frameworks-by-usage-and-satisfaction" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from Jamstack.org showing the percentage of people that use some framework and the satisfaction to use that framework.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>React</th><th>71%</th><th>2.9</th></tr></thead><tbody><tr><td>jQuery</td><td>44%</td><td>0.3</td></tr><tr><td>Vue.js</td><td>33%</td><td>3.1</td></tr><tr><td>Angular</td><td>20%</td><td>0.7</td></tr><tr><td>Svelte</td><td>19%</td><td>5.3</td></tr><tr><td>Angular.js</td><td>14%</td><td>0.3</td></tr><tr><td>Preact</td><td>12%</td><td>2.0</td></tr><tr><td>Solid</td><td>6%</td><td>2.0</td></tr><tr><td>Stencil</td><td>5%</td><td>1.5</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="market-share">Market share<a class="hash-link" aria-label="Direct link to Market share" title="Direct link to Market share" href="https://tonai.github.io/blog/posts/front-end-frameworks#market-share">​</a></h3>
<p>We can gather market share data for various frameworks using the following tools:</p>
<ul>
<li><a href="https://trends.builtwith.com/javascript" target="_blank" rel="noopener noreferrer">Built With</a></li>
<li><a href="https://www.similartech.com/categories/javascript" target="_blank" rel="noopener noreferrer">SimilarTech</a></li>
<li><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66" target="_blank" rel="noopener noreferrer">Datanyze</a></li>
<li><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/" target="_blank" rel="noopener noreferrer">Wappalyzer</a></li>
</ul>
<p>Here is the data we can collect from the following sources as of September 12, 2023:</p>
<table><thead><tr><th>Framework</th><th>Built With</th><th>SimilarTech</th><th>Datanyze</th><th>Wappalyzer</th></tr></thead><tbody><tr><td>jQuery</td><td><a href="https://trends.builtwith.com/javascript/jQuery" target="_blank" rel="noopener noreferrer">79.3M</a></td><td><a href="https://www.similartech.com/technologies/jquery" target="_blank" rel="noopener noreferrer">19.1M</a></td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/jquery-market-share" target="_blank" rel="noopener noreferrer">12.9M</a></td><td><a href="https://www.wappalyzer.com/technologies/javascript-libraries/jquery/" target="_blank" rel="noopener noreferrer">5M</a></td></tr><tr><td>React</td><td><a href="https://trends.builtwith.com/javascript/React" target="_blank" rel="noopener noreferrer">12.4M</a></td><td><a href="https://www.similartech.com/technologies/react-js" target="_blank" rel="noopener noreferrer">1.4M</a></td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/react-market-share" target="_blank" rel="noopener noreferrer">500k</a></td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/react/" target="_blank" rel="noopener noreferrer">2.3M</a></td></tr><tr><td>Vue.js</td><td><a href="https://trends.builtwith.com/javascript/Vue" target="_blank" rel="noopener noreferrer">1.7M</a></td><td><a href="https://www.similartech.com/technologies/vuejs" target="_blank" rel="noopener noreferrer">343k</a></td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/vue-market-share" target="_blank" rel="noopener noreferrer">87k</a></td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/vue-js/" target="_blank" rel="noopener noreferrer">663k</a></td></tr><tr><td>Angular.js</td><td><a href="https://trends.builtwith.com/javascript/Angular-JS" target="_blank" rel="noopener noreferrer">1.0M</a></td><td><a href="https://www.similartech.com/technologies/angular-js" target="_blank" rel="noopener noreferrer">390k</a></td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/angularjs/" target="_blank" rel="noopener noreferrer">271k</a></td></tr><tr><td>Backbone</td><td><a href="https://trends.builtwith.com/javascript/Backbone.js" target="_blank" rel="noopener noreferrer">1.0M</a></td><td><a href="https://www.similartech.com/technologies/backbonejs" target="_blank" rel="noopener noreferrer">784k</a></td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/backbone.js-market-share" target="_blank" rel="noopener noreferrer">17k</a></td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/backbone-js/" target="_blank" rel="noopener noreferrer">444k</a></td></tr><tr><td>Alpine.js</td><td><a href="https://trends.builtwith.com/javascript/Alpine.js" target="_blank" rel="noopener noreferrer">144k</a></td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/alpine-js/" target="_blank" rel="noopener noreferrer">48k</a></td></tr><tr><td>Lit</td><td><a href="https://trends.builtwith.com/javascript/Lit" target="_blank" rel="noopener noreferrer">113k</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>Angular</td><td><a href="https://trends.builtwith.com/javascript/Angular" target="_blank" rel="noopener noreferrer">98k</a></td><td>-</td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/angular-market-share" target="_blank" rel="noopener noreferrer">89k</a></td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/angular/" target="_blank" rel="noopener noreferrer">209k</a></td></tr><tr><td>Ember</td><td><a href="https://trends.builtwith.com/javascript/Ember" target="_blank" rel="noopener noreferrer">32k</a></td><td><a href="https://www.similartech.com/technologies/ember-js" target="_blank" rel="noopener noreferrer">13k</a></td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/ember-js/" target="_blank" rel="noopener noreferrer">27k</a></td></tr><tr><td>Svelte</td><td><a href="https://trends.builtwith.com/framework/Svelte" target="_blank" rel="noopener noreferrer">31k</a></td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/svelte/" target="_blank" rel="noopener noreferrer">25k</a></td></tr><tr><td>Solid.js</td><td>-</td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/solidjs/" target="_blank" rel="noopener noreferrer">5k</a></td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary" href="https://tonai.github.io/blog/posts/front-end-frameworks#summary">​</a></h3>
<p>Here's a summary based on the collected data:</p>
<table><thead><tr><th>Frameworks</th><th>Popularity</th><th>Love/Interest</th><th>Usage</th></tr></thead><tbody><tr><td>jQuery</td><td>➕➕</td><td>➖➖</td><td>➕➕➕</td></tr><tr><td>React</td><td>➕➕➕</td><td>➕➕</td><td>➕➕</td></tr><tr><td>Vue.js</td><td>➕➕</td><td>➕➕</td><td>➕</td></tr><tr><td>Angular</td><td>➕➕</td><td>➖</td><td>➕</td></tr><tr><td>Svelte</td><td>➕</td><td>➕➕➕</td><td>➖</td></tr><tr><td>Preact</td><td>➖</td><td>➕</td><td>➖</td></tr><tr><td>Backbone</td><td>➖</td><td>➖➖</td><td>➖</td></tr><tr><td>Solid</td><td>➖</td><td>➕➕➕</td><td>➖➖</td></tr><tr><td>Alpine.js</td><td>➖</td><td>➕</td><td>➖➖</td></tr><tr><td>Ember</td><td>➖</td><td>➖➖</td><td>➖➖</td></tr><tr><td>Lit</td><td>➖➖</td><td>➕</td><td>➖</td></tr><tr><td>Omi</td><td>➖➖</td><td>➖➖</td><td>➖➖</td></tr><tr><td>Stencil</td><td>➖➖</td><td>➕</td><td>➖</td></tr></tbody></table>
<p>In the table above, the more ➕ symbols indicate higher levels of popularity, love/interest, or usage, while the more ➖ symbols represent lower levels of popularity, love/interest, or usage.</p>
<p>Please note that this summary is based on the data collected and the assessment of each framework across these different aspects.</p>
<p>If you want, you can jump to the article’s conclusion directly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rendering-frameworks">Rendering frameworks<a class="hash-link" aria-label="Direct link to Rendering frameworks" title="Direct link to Rendering frameworks" href="https://tonai.github.io/blog/posts/front-end-frameworks#rendering-frameworks">​</a></h2>
<p>Rendering frameworks are frequently built upon frontend frameworks, although this is not always the case.</p>
<p>They serve as an excellent solution for delivering an exceptional user experience while ensuring that website content remains indexable by search engines.</p>
<p>Now, let's explore some available data on these rendering frameworks to gain further insights.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-statistics-1">GitHub statistics<a class="hash-link" aria-label="Direct link to GitHub statistics" title="Direct link to GitHub statistics" href="https://tonai.github.io/blog/posts/front-end-frameworks#github-statistics-1">​</a></h3>
<p>Here are some statistics retrieved from <a href="https://github.com/" target="_blank" rel="noopener noreferrer">GitHub</a> that primarily indicate the popularity and interest for each framework. The statistics are sorted in descending order based on the number of stars (as of September 12, 2023):</p>
<table><thead><tr><th>Framework</th><th>Star</th><th>Fork</th><th>Watch</th><th>Contributors</th><th>Last commit</th><th>Created</th></tr></thead><tbody><tr><td><a href="https://github.com/vercel/next.js" target="_blank" rel="noopener noreferrer">Next.js</a></td><td>111k</td><td>24.7k</td><td>1.4k</td><td>2873</td><td>12/09/2023</td><td>05/10/2016</td></tr><tr><td><a href="https://github.com/gatsbyjs/gatsby" target="_blank" rel="noopener noreferrer">Gatsby</a></td><td>54.7k</td><td>10.6k</td><td>761</td><td>3981</td><td>07/09/2023</td><td>21/05/2015</td></tr><tr><td><a href="https://github.com/nuxt/nuxt" target="_blank" rel="noopener noreferrer">Nuxt</a></td><td>47.4k</td><td>4.3k</td><td>784</td><td>543</td><td>12/09/2023</td><td>26/10/2016</td></tr><tr><td><a href="https://github.com/meteor/meteor" target="_blank" rel="noopener noreferrer">Meteor</a></td><td>43.7k</td><td>5.3k</td><td>1.6k</td><td>702</td><td>11/09/2023</td><td>19/01/2012</td></tr><tr><td><a href="https://github.com/withastro/astro" target="_blank" rel="noopener noreferrer">Astro</a></td><td>34.8k</td><td>1.8k</td><td>175</td><td>589</td><td>11/09/2023</td><td>15/03/2021</td></tr><tr><td><a href="https://github.com/remix-run/remix" target="_blank" rel="noopener noreferrer">Remix</a></td><td>24.6k</td><td>2k</td><td>215</td><td>581</td><td>12/09/2023</td><td>26/10/2020</td></tr><tr><td><a href="https://github.com/quasarframework/quasar" target="_blank" rel="noopener noreferrer">Quasar</a></td><td>24.2k</td><td>3.3k</td><td>470</td><td>658</td><td>12/09/2023</td><td>05/10/2015</td></tr><tr><td><a href="https://github.com/BuilderIO/qwik" target="_blank" rel="noopener noreferrer">Qwik</a></td><td>18.8k</td><td>1.1k</td><td>135</td><td>433</td><td>11/09/2023</td><td>19/05/2021</td></tr><tr><td><a href="https://github.com/sveltejs/kit" target="_blank" rel="noopener noreferrer">SvelteKit</a></td><td>16k</td><td>1.5k</td><td>153</td><td>470</td><td>12/09/2023</td><td>15/10/2020</td></tr><tr><td><a href="https://github.com/marko-js/marko" target="_blank" rel="noopener noreferrer">Marko</a></td><td>12.8k</td><td>678</td><td>208</td><td>119</td><td>11/09/2023</td><td>07/01/2014</td></tr><tr><td><a href="https://github.com/denoland/fresh" target="_blank" rel="noopener noreferrer">Fresh</a></td><td>11.3k</td><td>523</td><td>89</td><td>199</td><td>11/09/2023</td><td>07/05/2021</td></tr><tr><td><a href="https://github.com/gridsome/gridsome" target="_blank" rel="noopener noreferrer">Gridsome</a></td><td>8.5k</td><td>498</td><td>125</td><td>124</td><td>22/09/2022</td><td>31/07/2018</td></tr><tr><td><a href="https://github.com/angular/universal" target="_blank" rel="noopener noreferrer">Angular universal</a></td><td>4k</td><td>499</td><td>149</td><td>112</td><td>05/09/2023</td><td>24/06/2015</td></tr><tr><td><a href="https://github.com/solidjs/solid-start" target="_blank" rel="noopener noreferrer">Solid start</a></td><td>3.8k</td><td>304</td><td>41</td><td>158</td><td>06/09/2023</td><td>30/03/2021</td></tr><tr><td><a href="https://github.com/enhance-dev/enhance-starter-project" target="_blank" rel="noopener noreferrer">Enhance</a></td><td>321</td><td>11</td><td>2</td><td>8</td><td>30/08/2023</td><td>18/07/2022</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-star-history-1">GitHub star history<a class="hash-link" aria-label="Direct link to GitHub star history" title="Direct link to GitHub star history" href="https://tonai.github.io/blog/posts/front-end-frameworks#github-star-history-1">​</a></h3>
<p>By utilizing <a href="https://star-history.com/" target="_blank" rel="noopener noreferrer">Star history</a> we can generate an image illustrating the GitHub star history for various frameworks over time. This image provides us with valuable insights into the trends and levels of popularity (indicated by the shape of the curve, particularly rapid increases) for these frameworks:</p>
<p><img decoding="async" loading="lazy" alt="Star history graph for rendering frameworks" src="https://tonai.github.io/blog/assets/images/star-history-rendering-36b14323bd50699cd7f0330cc50da7d9.png" width="852" height="562" class="img_ev3q"></p>
<p><a href="https://star-history.com/#vercel/next.js&amp;gatsbyjs/gatsby&amp;nuxt/nuxt&amp;meteor/meteor&amp;withastro/astro&amp;quasarframework/quasar&amp;remix-run/remix&amp;builderio/qwik&amp;sveltejs/kit&amp;Date" target="_blank" rel="noopener noreferrer">Click here</a> to view an updated graph based on the date you're reading this article (you will need to provide a GitHub token).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="google-trends-1">Google trends<a class="hash-link" aria-label="Direct link to Google trends" title="Direct link to Google trends" href="https://tonai.github.io/blog/posts/front-end-frameworks#google-trends-1">​</a></h3>
<p>By utilizing <a href="https://trends.google.com/" target="_blank" rel="noopener noreferrer">Google trends</a>, we can generate an image that illustrates the search trends on Google. This image provides valuable insights into the relative popularity and interest over time for various frameworks based on search queries:</p>
<p><img decoding="async" loading="lazy" alt="Google trends graph for rendering frameworks" src="https://tonai.github.io/blog/assets/images/trends-rendering-en-b4201535bf916e13c439995c1a09fe9a.png" width="1158" height="681" class="img_ev3q"></p>
<p><a href="https://trends.google.fr/trends/explore?date=today%205-y&amp;q=%2Fg%2F11h4q9rcf3,%2Fg%2F11g0wgnhgc,%2Fg%2F11r9q51mg3&amp;hl=en" target="_blank" rel="noopener noreferrer">Click here</a> to view an updated graph based on the date you're reading this article.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="npm-trends-1">npm trends<a class="hash-link" aria-label="Direct link to npm trends" title="Direct link to npm trends" href="https://tonai.github.io/blog/posts/front-end-frameworks#npm-trends-1">​</a></h3>
<p>By referring to <a href="https://npmtrends.com/@angular/core-vs-@stencil/core-vs-alpinejs-vs-backbone-vs-lit-vs-preact-vs-react-vs-solid-js-vs-svelte-vs-vue" target="_blank" rel="noopener noreferrer">npm trends</a>, we can obtain the number of downloads for various frameworks, providing insights into their usage. The download statistics indicate the level of adoption and utilization for each framework:</p>
<p><img decoding="async" loading="lazy" alt="npm trends graph for rendering frameworks" src="https://tonai.github.io/blog/assets/images/npm-rendering-ec6b67bc3be4906808bfbef76956e268.png" width="1284" height="499" class="img_ev3q"></p>
<p><a href="https://npmtrends.com/@builder.io/qwik-vs-@nguniversal/common-vs-@remix-run/node-vs-@sveltejs/kit-vs-astro-vs-gatsby-vs-marko-vs-next-vs-nuxt-vs-quasar" target="_blank" rel="noopener noreferrer">Click here</a> to view an updated graph based on the date you're reading this article.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stack-overflow-2023-survey-1">Stack Overflow 2023 survey<a class="hash-link" aria-label="Direct link to Stack Overflow 2023 survey" title="Direct link to Stack Overflow 2023 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#stack-overflow-2023-survey-1">​</a></h3>
<p><a href="https://survey.stackoverflow.co/2023/#section-most-popular-technologies-web-frameworks-and-technologies" target="_blank" rel="noopener noreferrer">Here</a> is a survey result from Stack Overflow about popular technologies and how much they are admired (people that have used and want to continue using it) or desired (people that want to use it) by developers.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Used</th><th>Desired</th><th>Admired</th></tr></thead><tbody><tr><td>Next.js</td><td>16.67%</td><td>20.27%</td><td>65.95%</td></tr><tr><td>Nuxt</td><td>3.69%</td><td>4.85%</td><td>57.24%</td></tr><tr><td>Gatsby</td><td>2.33%</td><td>1.54%</td><td>28.66%</td></tr><tr><td>Remix</td><td>1.27%</td><td>3.19%</td><td>57.02%</td></tr><tr><td>Qwik</td><td>0.54%</td><td>3.12%</td><td>66.58%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="state-of-js-2022-survey-1">State of JS 2022 survey<a class="hash-link" aria-label="Direct link to State of JS 2022 survey" title="Direct link to State of JS 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#state-of-js-2022-survey-1">​</a></h3>
<p><a href="https://2022.stateofjs.com/en-US/libraries/rendering-frameworks/" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from State of JS showing the percentage of people that knows some frameworks, have used them, are interested in them or who would use them again.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Awareness</th><th>Usage</th><th>Interest</th><th>Retention</th></tr></thead><tbody><tr><td>Next.js</td><td>97.8%</td><td>48.6%</td><td>65.2%</td><td>90.0%</td></tr><tr><td>Nuxt</td><td>84.5%</td><td>18.1%</td><td>45.9%</td><td>79.9%</td></tr><tr><td>Gatsby</td><td>84.5%</td><td>23.0%</td><td>31.5%</td><td>38.4%</td></tr><tr><td>Remix</td><td>73.8%</td><td>7.8%</td><td>56.5%</td><td>81.8%</td></tr><tr><td>Astro</td><td>64.0%</td><td>8.8%</td><td>67.3%</td><td>92.8%</td></tr><tr><td>SvelteKit</td><td>71.9%</td><td>11.9%</td><td>66.3%</td><td>92.5%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="state-of-frontend-2022-survey-1">State of Frontend 2022 survey<a class="hash-link" aria-label="Direct link to State of Frontend 2022 survey" title="Direct link to State of Frontend 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#state-of-frontend-2022-survey-1">​</a></h3>
<p><a href="https://tsh.io/state-of-frontend/#over-the-past-year-which-of-the-following-frameworks-have-you-used-and-liked" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from State of Frontend showing the percentage of people that used and liked or disliked some framework and the percentage of people who would like to learn some framework.</p>
<p>We can extract following the information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Liked</th><th>Disliked</th><th>Like to learn</th></tr></thead><tbody><tr><td>Next.js</td><td>73.1%</td><td>8.3%</td><td>33.5%</td></tr><tr><td>Gatsby</td><td>11.6%</td><td>17.7%</td><td>10.5%</td></tr><tr><td>Nuxt</td><td>9.4%</td><td>4.1%</td><td>13.0%</td></tr><tr><td>Remix</td><td>8.8%</td><td>2.5%</td><td>36.2%</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jamstackorg-2022-survey-1">Jamstack.org 2022 survey<a class="hash-link" aria-label="Direct link to Jamstack.org 2022 survey" title="Direct link to Jamstack.org 2022 survey" href="https://tonai.github.io/blog/posts/front-end-frameworks#jamstackorg-2022-survey-1">​</a></h3>
<p><a href="https://jamstack.org/survey/2022/#frameworks-by-usage-and-satisfaction" target="_blank" rel="noopener noreferrer">Here</a> is another survey result from Jamstack.org showing the percentage of people that use some framework and the satisfaction to use that framework.</p>
<p>We can extract the following information regarding the list of frameworks we want to focus on in this section:</p>
<table><thead><tr><th>Framework</th><th>Used</th><th>Satisfaction</th></tr></thead><tbody><tr><td>Next.js</td><td>47%</td><td>4.2</td></tr><tr><td>Gatsby</td><td>28%</td><td>0.9</td></tr><tr><td>Nuxt</td><td>22%</td><td>2.7</td></tr><tr><td>SvelteKit</td><td>15%</td><td>4.0</td></tr><tr><td>Astro</td><td>11%</td><td>4.5</td></tr><tr><td>Remix</td><td>11%</td><td>4.5</td></tr><tr><td>Gridsome</td><td>7%</td><td>0.8</td></tr><tr><td>Quasar</td><td>4%</td><td>1.0</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="market-share-1">Market share<a class="hash-link" aria-label="Direct link to Market share" title="Direct link to Market share" href="https://tonai.github.io/blog/posts/front-end-frameworks#market-share-1">​</a></h3>
<p>We can gather market share data for various frameworks using the following tools:</p>
<ul>
<li><a href="https://trends.builtwith.com/javascript" target="_blank" rel="noopener noreferrer">Built With</a></li>
<li><a href="https://www.similartech.com/categories/javascript" target="_blank" rel="noopener noreferrer">SimilarTech</a></li>
<li><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66" target="_blank" rel="noopener noreferrer">Datanyze</a></li>
<li><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/" target="_blank" rel="noopener noreferrer">Wappalyzer</a></li>
</ul>
<p>Here is the data we can collect from the following sources as of September 12, 2023:</p>
<table><thead><tr><th>Framework</th><th>Built With</th><th>SimilarTech</th><th>Datanyze</th><th>Wappalyzer</th></tr></thead><tbody><tr><td>Next.js</td><td><a href="https://trends.builtwith.com/framework/Next.js" target="_blank" rel="noopener noreferrer">1.1M</a></td><td>-</td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/next.js-market-share" target="_blank" rel="noopener noreferrer">11k</a></td><td><a href="https://www.wappalyzer.com/technologies/web-servers/next-js/" target="_blank" rel="noopener noreferrer">212k</a></td></tr><tr><td>Nuxt</td><td><a href="https://trends.builtwith.com/framework/Nuxt.js" target="_blank" rel="noopener noreferrer">531k</a></td><td>-</td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/nuxt.js-market-share" target="_blank" rel="noopener noreferrer">15k</a></td><td><a href="https://www.wappalyzer.com/technologies/web-servers/nuxt-js/" target="_blank" rel="noopener noreferrer">78k</a></td></tr><tr><td>Gatsby</td><td><a href="https://trends.builtwith.com/framework/Gatsby-JS" target="_blank" rel="noopener noreferrer">169k</a></td><td><a href="https://www.similartech.com/technologies/gatsby" target="_blank" rel="noopener noreferrer">46k</a></td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/static-site-generator/gatsby/" target="_blank" rel="noopener noreferrer">31k</a></td></tr><tr><td>Meteor</td><td><a href="https://trends.builtwith.com/framework/Meteor" target="_blank" rel="noopener noreferrer">26k</a></td><td><a href="https://www.similartech.com/technologies/meteor" target="_blank" rel="noopener noreferrer">33k</a></td><td><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66/meteor-market-share" target="_blank" rel="noopener noreferrer">1k</a></td><td><a href="https://www.wappalyzer.com/technologies/web-frameworks/meteor/" target="_blank" rel="noopener noreferrer">7k</a></td></tr><tr><td>Remix</td><td><a href="https://trends.builtwith.com/framework/Remix" target="_blank" rel="noopener noreferrer">14k</a></td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/web-servers/remix/" target="_blank" rel="noopener noreferrer">4k</a></td></tr><tr><td>Marko</td><td><a href="https://trends.builtwith.com/framework/Marko" target="_blank" rel="noopener noreferrer">1k</a></td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/ui-frameworks/marko/" target="_blank" rel="noopener noreferrer">145k</a></td></tr><tr><td>Astro</td><td><a href="https://trends.builtwith.com/framework/Astro" target="_blank" rel="noopener noreferrer">29k</a></td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/astro/" target="_blank" rel="noopener noreferrer">5k</a></td></tr><tr><td>Quasar</td><td><a href="https://trends.builtwith.com/framework/Quasar-Framework" target="_blank" rel="noopener noreferrer">2</a></td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/quasar/" target="_blank" rel="noopener noreferrer">2k</a></td></tr><tr><td>SvelteKit</td><td>-</td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/ui-frameworks/sveltekit/" target="_blank" rel="noopener noreferrer">5k</a></td></tr><tr><td>Fresh</td><td>-</td><td>-</td><td>-</td><td><a href="https://www.wappalyzer.com/technologies/web-frameworks/fresh/" target="_blank" rel="noopener noreferrer">170</a></td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-1">Summary<a class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary" href="https://tonai.github.io/blog/posts/front-end-frameworks#summary-1">​</a></h3>
<p>Here's a summary based on the collected data:</p>
<table><thead><tr><th>Frameworks</th><th>Popularity</th><th>Love/Interest</th><th>Usage</th></tr></thead><tbody><tr><td>Next.js</td><td>➕➕➕</td><td>➕➕➕</td><td>➕➕➕</td></tr><tr><td>Gatsby</td><td>➕➕</td><td>➖➖</td><td>➕</td></tr><tr><td>Nuxt</td><td>➕➕</td><td>➕➕</td><td>➕➕</td></tr><tr><td>Meteor</td><td>➕➕</td><td>➖</td><td>➖</td></tr><tr><td>Astro</td><td>➕</td><td>➕➕➕</td><td>➖</td></tr><tr><td>Quasar</td><td>➕</td><td>➖➖</td><td>➖</td></tr><tr><td>Remix</td><td>➕</td><td>➕➕➕</td><td>➖</td></tr><tr><td>Qwik</td><td>➖</td><td>➕➕➕</td><td>➖➖</td></tr><tr><td>SvelteKit</td><td>➖</td><td>➕➕➕</td><td>➖</td></tr><tr><td>Marko</td><td>➖</td><td>❓</td><td>➖</td></tr><tr><td>Fresh</td><td>➖</td><td>➕</td><td>➖➖</td></tr><tr><td>Gridsome</td><td>➖</td><td>➖➖</td><td>➖➖</td></tr><tr><td>Angular universal</td><td>➖➖</td><td>➖</td><td>➖</td></tr><tr><td>Solid start</td><td>➖➖</td><td>➕➕➕</td><td>➖➖</td></tr><tr><td>Enhance</td><td>➖➖</td><td>❓</td><td>➖➖</td></tr></tbody></table>
<p>In the table above, the more ➕ symbols indicate higher levels of popularity, love/interest, or usage, while the more ➖ symbols represent lower levels of popularity, love/interest, or usage.</p>
<p>Please note that this summary is based on the data collected and the assessment of each framework across these different aspects.</p>
<p>You can find the conclusion in the next chapter.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tonai.github.io/blog/posts/front-end-frameworks#conclusion">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="frontend-frameworks-1">Frontend frameworks<a class="hash-link" aria-label="Direct link to Frontend frameworks" title="Direct link to Frontend frameworks" href="https://tonai.github.io/blog/posts/front-end-frameworks#frontend-frameworks-1">​</a></h3>
<p>**React (**Popularity&nbsp;<strong>➕➕➕ /</strong> Love/Interest&nbsp;<strong>➕➕ /</strong> Usage&nbsp;<strong>➕➕)</strong></p>
<p>React is a widely adopted and highly popular solution with a large and active community.<br>
<!-- -->Pros:</p>
<ul>
<li>It boasts a large community of users.</li>
<li>Regular updates ensure its continuous improvement.</li>
<li>It can be easily integrated with numerous other JavaScript libraries.</li>
<li>It allows the creation of components without the need for classes, promoting functional programming.</li>
<li>Smooth migration between different versions is supported.</li>
<li>Meta backs it.</li>
</ul>
<p>Cons:</p>
<ul>
<li>The fast-paced updates and the abundance of libraries that complement React can make it challenging to select the right tools and navigate through proper documentation.</li>
<li>The complexity of learning JavaScript syntax can be a hurdle.</li>
</ul>
<p>**Vue.js (**Popularity&nbsp;<strong>➕➕ /</strong> Love/Interest&nbsp;<strong>➕➕ /</strong> Usage&nbsp;<strong>➕)</strong></p>
<p>Vue.js shares similarities with React but also offers the advantage of being suitable for progressive enhancement scenarios and is generally considered simpler for beginners.</p>
<p>Pros:</p>
<ul>
<li>It is lightweight and delivers fast performance.</li>
<li>It provides a user-friendly environment for beginners.</li>
<li>Detailed documentation is available to support developers.</li>
<li>Two-way data binding simplifies data management.</li>
<li>It is compatible with progressive enhancement approaches.</li>
</ul>
<p>Cons:</p>
<ul>
<li>The community of developers using Vue.js is relatively limited.</li>
<li>There is no well-established company actively supporting and backing Vue.js.</li>
</ul>
<p>**Angular (**Popularity&nbsp;<strong>➕➕ /</strong> Love/Interest&nbsp;<strong>➖ /</strong> Usage&nbsp;<strong>➕)</strong></p>
<p>Angular remains a robust solution, although its lack of server-side rendering (SSR) support limits its usability in certain situations.</p>
<p>Pros:</p>
<ul>
<li>It promotes object-oriented programming (OOP) style.</li>
<li>Two-way data binding simplifies data management.</li>
<li>Directives and dependency injection enhance flexibility.</li>
<li>It facilitates the creation of highly testable, reusable, and manageable applications.</li>
<li>A strong community and abundant training materials support developers.</li>
<li>Google backs it.</li>
</ul>
<p>Cons:</p>
<ul>
<li>Its reliance on object-oriented programming (OOP) can be a drawback for some.</li>
<li>Beginners may find it challenging to grasp initially.</li>
<li>The codebase can become bloated and large.</li>
<li>It may not be suitable for all scenarios, given the lack of server-side rendering (SSR) support.</li>
</ul>
<p>**Svelte (**Popularity&nbsp;<strong>➕ /</strong> Love/Interest&nbsp;<strong>➕➕➕ /</strong> Usage&nbsp;<strong>➖)</strong></p>
<p>Svelte can be described more as a compiler than a library, which results in front-end code that doesn't rely on a large library, thereby reducing the size of JavaScript code.</p>
<p>Pros:</p>
<ul>
<li>It is one of the fastest front-end frameworks, offering quick responsiveness.</li>
<li>It provides a beginner-friendly environment.</li>
<li>The codebase remains minimal.</li>
<li>It doesn't employ a virtual DOM, which can contribute to performance improvements.</li>
</ul>
<p>Cons:</p>
<ul>
<li>The community and ecosystem surrounding Svelte are relatively immature and limited.</li>
<li>There is a lack of supporting materials and limited tooling available.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rendering-frameworks-1">Rendering frameworks<a class="hash-link" aria-label="Direct link to Rendering frameworks" title="Direct link to Rendering frameworks" href="https://tonai.github.io/blog/posts/front-end-frameworks#rendering-frameworks-1">​</a></h3>
<p>**Next.js (**Popularity&nbsp;<strong>➕➕➕ /</strong> Love/Interest&nbsp;<strong>➕➕➕ /</strong> Usage&nbsp;<strong>➕➕➕)</strong></p>
<p>Next.js, similar to React on which it is built, is a popular and widely used solution.</p>
<p>Pros:</p>
<ul>
<li>It is based on React, leveraging its benefits.</li>
<li>It supports multiple rendering techniques, including Incremental Static Regeneration (ISR) with on-demand revalidation.</li>
<li>Next.js now implements React Server Components.</li>
<li>It is supported by Vercel, a reputable platform.</li>
</ul>
<p>Cons:</p>
<ul>
<li>It shares some challenges associated with React.</li>
<li>There is a learning curve involved in mastering Next.js.</li>
</ul>
<p>**Nuxt (**Popularity&nbsp;<strong>➕➕ /</strong> Love/Interest&nbsp;<strong>➕➕ /</strong> Usage&nbsp;<strong>➕➕)</strong></p>
<p>Nuxt.js can be considered the equivalent of Next.js for Vue.js.</p>
<p>Pros:</p>
<ul>
<li>It is built upon Vue.js, harnessing its advantages.</li>
<li>Nuxt.js supports multiple rendering techniques, including Incremental Static Regeneration (ISR) with time-based revalidation only.</li>
</ul>
<p>Cons:</p>
<ul>
<li>It shares some challenges associated with Vue.js.</li>
<li>There is a learning curve involved in getting familiar with Nuxt.js.</li>
</ul>
<p>**Gatsby (**Popularity&nbsp;<strong>➕➕ /</strong> Love/Interest&nbsp;<strong>➖➖ /</strong> Usage&nbsp;<strong>➕)</strong></p>
<p>Gatsby shares similarities with Next.js but may be considered less appealing. However, its recent acquisition by Netlify suggests potential for resurgence in the near future.</p>
<p>Pros:</p>
<ul>
<li>It is based on React, leveraging its benefits.</li>
<li>Gatsby offers a robust data layer that seamlessly connects with headless solutions.</li>
<li>It is supported by Netlify, a reputable platform.</li>
</ul>
<p>Cons:</p>
<ul>
<li>Gatsby faces similar challenges as React.</li>
<li>There is a learning curve associated with using Gatsby.</li>
<li>It does not support custom backend logic.</li>
</ul>
<p>**Remix (**Popularity&nbsp;<strong>➕ /</strong> Love/Interest&nbsp;<strong>➕➕➕ /</strong> Usage&nbsp;<strong>➖)</strong></p>
<p>Remix is a compelling solution built on React, focusing on achieving progressive enhancement.</p>
<p>Pros:</p>
<ul>
<li>It is based on React, leveraging its capabilities.</li>
<li>It can operate without JavaScript enabled on the client side, combining Single Page Application (SPA) with Progressive Enhancement Multi-Page Application (PEMPA) to form Progressive Enhancement Single Page Application (PESPA).</li>
</ul>
<p>Cons:</p>
<ul>
<li>Remix shares some of the challenges associated with React.</li>
<li>Learning Remix also requires a learning curve.</li>
<li>It lacks support for Static Site Generation (SSG).</li>
</ul>
<p>**Astro (**Popularity&nbsp;<strong>➕ /</strong> Love/Interest&nbsp;<strong>➕➕➕ /</strong> Usage&nbsp;<strong>➖)</strong></p>
<p>Astro is built on the Multi-Page Application (MPA) architecture, which does not support client-side navigation. However, it offers compatibility with multiple frontend frameworks and incorporates island hydration, enabling a fast user experience.</p>
<p>Pros:</p>
<ul>
<li>It can be utilized with a variety of frontend frameworks, including React, Vue.js, Svelte, Preact, Solid, Lit, or Alpine.js.</li>
<li>Astro can be deployed on various edge platforms, such as AWS, GCP, Vercel, Netlify, Cloudflare, and more.</li>
<li>It delivers excellent performance through the implementation of Astro Islands, a technique that facilitates selective hydration and speeds up the hydration process.</li>
</ul>
<p>Cons:</p>
<ul>
<li>There is a learning curve associated with using Astro.</li>
<li>The community and ecosystem surrounding Astro are relatively immature and limited.</li>
<li>Supporting materials and available tooling for Astro are currently lacking.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-to-choose">What to choose?<a class="hash-link" aria-label="Direct link to What to choose?" title="Direct link to What to choose?" href="https://tonai.github.io/blog/posts/front-end-frameworks#what-to-choose">​</a></h3>
<p>Have you made a decision regarding the framework you will choose?</p>
<p>If you're uncertain about whether to opt for a frontend framework or a rendering framework, I recommend referring to <a href="https://blog.smile.eu/en/digital/how-choose-right-front-end-architecture" target="_blank" rel="noopener noreferrer">my previous article on front-end architecture</a> for guidance.</p>
<p>Here are some additional factors to consider:</p>
<ul>
<li>
<p>Select a framework based on its compatibility with other technologies you intend to use. For instance, if you plan to incorporate 3D elements, using <a href="https://threejs.org/" target="_blank" rel="noopener noreferrer">Three.js</a> would be beneficial. This library integrates seamlessly with React through <a href="https://docs.pmnd.rs/react-three-fiber/getting-started/introduction" target="_blank" rel="noopener noreferrer">React three fiber</a>.</p>
</li>
<li>
<p>Decide a framework that suits your team's skills and expertise. If your team is already familiar with React, it might be easier to proceed with React. On the other hand, if your team has limited JavaScript knowledge, Vue.js could be a better fit. Additionally, if your team prefers a comprehensive and structured framework, Angular might be the best choice for them.</p>
</li>
<li>
<p>If you don't have a team yet, it's advisable to go with the most widely used solution, which typically means React/Next.js. This approach can facilitate finding suitable team members with relevant expertise.</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a class="hash-link" aria-label="Direct link to Resources" title="Direct link to Resources" href="https://tonai.github.io/blog/posts/front-end-frameworks#resources">​</a></h3>
<p>Articles:</p>
<ul>
<li><a href="https://www.codeinwp.com/blog/angular-vs-vue-vs-react/" target="_blank" rel="noopener noreferrer">https://www.codeinwp.com/blog/angular-vs-vue-vs-react/</a></li>
<li><a href="https://zerotomastery.io/blog/tech-trends-showdown-react-vs-angular-vs-vue/" target="_blank" rel="noopener noreferrer">https://zerotomastery.io/blog/tech-trends-showdown-react-vs-angular-vs-vue/</a></li>
<li><a href="https://www.ideamotive.co/blog/best-frontend-frameworks" target="_blank" rel="noopener noreferrer">https://www.ideamotive.co/blog/best-frontend-frameworks</a></li>
<li><a href="https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190" target="_blank" rel="noopener noreferrer">https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190</a></li>
<li><a href="https://docs.google.com/spreadsheets/d/1kODyUrTPWvz5n0fpUovRdxfXsSikVHz6T3h9Kspuk8g/edit#gid=565667122" target="_blank" rel="noopener noreferrer">https://docs.google.com/spreadsheets/d/1kODyUrTPWvz5n0fpUovRdxfXsSikVHz6T3h9Kspuk8g/edit#gid=565667122</a></li>
</ul>
<p>Statistics and surveys:</p>
<ul>
<li><a href="https://github.com/" target="_blank" rel="noopener noreferrer">https://github.com/</a></li>
<li><a href="https://star-history.com/" target="_blank" rel="noopener noreferrer">https://star-history.com/</a></li>
<li><a href="https://trends.google.com/" target="_blank" rel="noopener noreferrer">https://trends.google.com/</a></li>
<li><a href="https://npmtrends.com/" target="_blank" rel="noopener noreferrer">https://npmtrends.com/</a></li>
<li><a href="https://survey.stackoverflow.co/2023/" target="_blank" rel="noopener noreferrer">https://survey.stackoverflow.co/2023/</a></li>
<li><a href="https://stateofjs.com/en-us/" target="_blank" rel="noopener noreferrer">https://stateofjs.com/en-us/</a></li>
<li><a href="https://tsh.io/state-of-frontend/#report" target="_blank" rel="noopener noreferrer">https://tsh.io/state-of-frontend/#report</a></li>
<li><a href="https://www.jetbrains.com/lp/devecosystem-2022/javascript/" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/lp/devecosystem-2022/javascript/</a></li>
<li><a href="https://jamstack.org/survey/2022/#frameworks-by-usage-and-satisfaction" target="_blank" rel="noopener noreferrer">https://jamstack.org/survey/2022/#frameworks-by-usage-and-satisfaction</a></li>
<li><a href="https://trends.builtwith.com/javascript" target="_blank" rel="noopener noreferrer">https://trends.builtwith.com/javascript</a></li>
<li><a href="https://www.similartech.com/categories/javascript" target="_blank" rel="noopener noreferrer">https://www.similartech.com/categories/javascript</a></li>
<li><a href="https://www.datanyze.com/market-share/frameworks-and-libraries--66" target="_blank" rel="noopener noreferrer">https://www.datanyze.com/market-share/frameworks-and-libraries--66</a></li>
<li><a href="https://www.wappalyzer.com/technologies/javascript-frameworks/" target="_blank" rel="noopener noreferrer">https://www.wappalyzer.com/technologies/javascript-frameworks/</a></li>
</ul>]]></content>
        <author>
            <name>Tony Cabaye</name>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="frameworks" term="frameworks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to choose the right front-end architecture?]]></title>
        <id>https://tonai.github.io/blog/posts/front-end-architecture</id>
        <link href="https://tonai.github.io/blog/posts/front-end-architecture"/>
        <updated>2023-06-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This article helps you make your choice for the right front-end architecture.]]></summary>
        <content type="html"><![CDATA[<p>Choosing the right frontend framework can indeed be challenging, especially in a rapidly evolving landscape.</p>
<p>The purpose of this article is to assist you in selecting the appropriate architecture by providing an overview of the evolution of frontend frameworks.</p>
<p>To fully grasp the current challenges that frontend frameworks address, it is crucial to explore the different frontend architectures that exist and gain an understanding of their respective advantages and drawbacks.</p>
<p>By examining these architectures, you can develop a solid foundation for evaluating and selecting the most suitable framework for your project.</p>
<ul>
<li>First, let's delve into various frontend architectures to gain a comprehensive understanding of the evolution of frontend frameworks.</li>
<li>Next, we'll shift our attention to the rendering techniques employed by Server Side Rendering (SSR) frameworks.</li>
<li>Finally, we'll explore different hydration techniques used to enhance interactivity in web applications.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="architectures">Architectures<a class="hash-link" aria-label="Direct link to Architectures" title="Direct link to Architectures" href="https://tonai.github.io/blog/posts/front-end-architecture#architectures">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="multi-page-apps-mpa">Multi-Page Apps (MPA)<a class="hash-link" aria-label="Direct link to Multi-Page Apps (MPA)" title="Direct link to Multi-Page Apps (MPA)" href="https://tonai.github.io/blog/posts/front-end-architecture#multi-page-apps-mpa">​</a></h3>
<p>The Multi-Page App (MPA) was the initial architecture employed when browser capabilities were limited.</p>
<p>In this architecture, the majority of dynamic processes occur on the backend.</p>
<p>Here's how navigation works within an MPA application:</p>
<p><img decoding="async" loading="lazy" alt="MPA Load" src="https://tonai.github.io/blog/assets/images/mpa-navigate-en.drawio-adc157f4af2d81c1de8f179a12c24c9f.png" width="602" height="282" class="img_ev3q"></p>
<ol>
<li>The client navigates through the website (e.g., clicking a link), and the browser provides visual feedback (e.g., displaying a spinner in the tab).</li>
<li>Routing takes place on the backend.</li>
<li>Data is fetched from the database.</li>
<li>The backend generates the HTML, which is then sent back to the client.</li>
<li>The browser renders the HTML.</li>
</ol>
<p>Here's another example that involves a redirect after form submission (a well-known pattern used to prevent form resubmission when the page is refreshed):</p>
<p><img decoding="async" loading="lazy" alt="MPA Navigate" src="https://tonai.github.io/blog/assets/images/mpa-form-redirect-en.drawio-b19dc72246a3c944d1354e2e2b55eefc.png" width="602" height="522" class="img_ev3q"></p>
<ol>
<li>The client submits a form, resulting in UI feedback.</li>
<li>Routing occurs, and the backend manages the data.</li>
<li>The backend instructs the browser to redirect the user.</li>
<li>The browser automatically redirects the user to the new page, providing UI feedback once again.</li>
<li>The backend then generates the HTML for the new page.</li>
<li>Finally, the browser renders the HTML.</li>
</ol>
<p>What are the advantages of such an architecture?</p>
<ol>
<li>It is straightforward to comprehend since all logic resides on the backend, eliminating additional complexity.</li>
<li>UI feedback is handled by the browser.</li>
</ol>
<p>And what are the disadvantages?</p>
<ol>
<li>It involves full-page refreshes, requiring the reloading of frontend assets every time.</li>
<li>Some tasks can be challenging to accomplish, such as managing focus or scroll position after form submission for example.</li>
<li>Certain tasks are impractical, for instance, experiencing a full-page refresh every time an item is added to the favorites list.</li>
<li>Some tasks are simply impossible, like animated page transitions.</li>
<li>Managing state can be tricky, involving the utilization of cookies and other techniques.</li>
<li>UI feedback is limited and not closely associated with the element the user interacted with.</li>
</ol>
<p>Due to these limitations, alternative architectures were introduced.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="progressively-enhanced-multi-page-apps-pempa">Progressively Enhanced Multi-Page Apps (PEMPA)<a class="hash-link" aria-label="Direct link to Progressively Enhanced Multi-Page Apps (PEMPA)" title="Direct link to Progressively Enhanced Multi-Page Apps (PEMPA)" href="https://tonai.github.io/blog/posts/front-end-architecture#progressively-enhanced-multi-page-apps-pempa">​</a></h3>
<p>Progressive Enhancement is the concept that our web applications should be functional and accessible to all web browsers, and then utilize additional browser capabilities to enhance the user experience (e.g., using JS and AJAX for improved UX).</p>
<p>Here's what happens when the user loads the website for the first time:</p>
<p><img decoding="async" loading="lazy" alt="PEMP LoadA" src="https://tonai.github.io/blog/assets/images/pempa-load-en.drawio-2cd5764721baaac260b30de31aac96ef.png" width="602" height="282" class="img_ev3q"></p>
<ol>
<li>The client loads the website, arriving from a Google search, for example.</li>
<li>Similar to MPA, the backend generates the HTML and sends it back to the client.</li>
<li>The browser renders the HTML, and JavaScript is loaded.</li>
</ol>
<p>Now, let's consider the case where we use JavaScript to leverage browser history when the page is already loaded:</p>
<p><img decoding="async" loading="lazy" alt="PEMPA Navigate" src="https://tonai.github.io/blog/assets/images/pempa-navigate-en.drawio-3548d395e0e2f97a4fd51f63863f9334.png" width="602" height="362" class="img_ev3q"></p>
<ol>
<li>The client navigates within the website.</li>
<li>JavaScript intercepts the default browser behavior, adds an item to the browser's navigation history, and changes the browser's URL (no browser feedback).</li>
<li>Data is fetched from the backend using AJAX.</li>
<li>On the backend side, the view component is no longer present, and data is usually sent back to the frontend in JSON format.</li>
<li>The frontend receives the data and renders the new UI.</li>
</ol>
<p>So, what is the advantage?</p>
<ol>
<li>Significantly improved user experience (that's the primary goal).</li>
</ol>
<p>And what about the disadvantages?</p>
<ol>
<li>More aspects to manage manually (e.g., form resubmission, error handling, spinners, etc.).</li>
<li>Increased amount of code on both the frontend and backend, which can potentially lead to more bugs.</li>
<li>Code duplication between the backend and frontend (the same UI needs to be available on both sides due to Progressive Enhancement).</li>
<li>Reliance on imperative code (with or without jQuery) that can be difficult to follow.</li>
<li>If a change is made on one side of the network (backend/frontend), the other side needs to be updated as well.</li>
</ol>
<p>While the UX is enhanced, it comes at a clear cost, which is why new architectures have been introduced.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="single-page-applications-spa">Single Page Applications (SPA)<a class="hash-link" aria-label="Direct link to Single Page Applications (SPA)" title="Direct link to Single Page Applications (SPA)" href="https://tonai.github.io/blog/posts/front-end-architecture#single-page-applications-spa">​</a></h3>
<p>To address the issue of code duplication while maintaining an enhanced user experience, the solution is to separate and remove the UI code from the backend. This is the core idea behind Single Page Applications (SPA).</p>
<p>Here's what happens when the user initially loads the website:</p>
<p><img decoding="async" loading="lazy" alt="SPA Load" src="https://tonai.github.io/blog/assets/images/spa-2-en.drawio-5927577c42862497ee1445fe5ab0d985.png" width="602" height="442" class="img_ev3q"></p>
<ol>
<li>The client loads the website.</li>
<li>The backend sends the HTML to the client, however, at this point, the HTML is mostly empty (most of the time we only store a HTML file behind a web server).</li>
<li>The browser renders the nearly empty HTML, and the JavaScript is loaded.</li>
<li>Depending on the browser's URL, the JavaScript will fetch data from the API server.</li>
<li>The backend sends the data (most of the time using the JSON format).</li>
<li>JavaScript renders the UI based on the URL.</li>
</ol>
<p>After the initial load, navigation follows a similar pattern as in the PEMPA scenario:</p>
<p><img decoding="async" loading="lazy" alt="SPA Navigate" src="https://tonai.github.io/blog/assets/images/pempa-navigate-en.drawio-3548d395e0e2f97a4fd51f63863f9334.png" width="602" height="362" class="img_ev3q"></p>
<p>The advantages of SPA are:</p>
<ol>
<li>Continued improvement in user experience.</li>
<li>Enhanced developer experience.</li>
<li>Elimination of code duplication.</li>
<li>Declarative code thanks to JSX or similar approaches.</li>
<li>Utilization of modern tooling.</li>
</ol>
<p>However, there are some drawbacks:</p>
<ol>
<li>SEO issues.</li>
<li>Larger bundle sizes.</li>
<li>Longer initial load times and potential waterfall issues (waiting for components to load before fetching data).</li>
<li>Reduced runtime performance on lower-powered devices.</li>
<li>Complex state management.</li>
</ol>
<p>Now, the problem of SEO (and sometimes performance) needs to be addressed, which leads us to the next architecture.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="server-side-rendered-single-page-applications-ssrspa">Server-Side Rendered Single Page Applications (SSRSPA)<a class="hash-link" aria-label="Direct link to Server-Side Rendered Single Page Applications (SSRSPA)" title="Direct link to Server-Side Rendered Single Page Applications (SSRSPA)" href="https://tonai.github.io/blog/posts/front-end-architecture#server-side-rendered-single-page-applications-ssrspa">​</a></h3>
<p>To address the SEO problem, rendering the application on the server during the initial load is required.</p>
<p>In this case, the application loads similarly to the PEMPA scenario from the point of vue of the client:</p>
<p><img decoding="async" loading="lazy" alt="SSRSPA Load" src="https://tonai.github.io/blog/assets/images/ssrspa-load-en.drawio-cfb201998e12fd74d3d159193af42729.png" width="842" height="362" class="img_ev3q"></p>
<ol>
<li>The client loads the website.</li>
<li>Then the node server fetch the data from the API server.</li>
<li>And use the data to build the view (as it would be done on the client side in the SPA architecture).</li>
<li>The browser renders the HTML and loads the JavaScript.</li>
<li>When the JavaScript is loaded, we use the term "hydration" to describe the process of making the page interactive.</li>
</ol>
<p>This "hydration" process is similar to the rendering that occurs on the backend, where the component tree is transformed into HTML.</p>
<p>In this case, it's done on the client and the generated virtual DOM is used to add event listeners to the existing DOM elements.</p>
<p>The navigation can follow either the same pattern as the MPA scenario or the same pattern as the PEMPA/SPA scenario, depending on the rendering technique employed (explained in the next section).</p>
<p>The advantages of this architecture are:</p>
<ol>
<li>Improved user experience.</li>
<li>Enhanced developer experience, including elimination of duplication, declarative code, and improved tooling.</li>
<li>No more SEO issues (although this may not be considered an advantage by some).</li>
<li>Potentially improved performance, depending on the rendering technique used.</li>
</ol>
<p>However, there are some disadvantages:</p>
<ol>
<li>State management remains challenging.</li>
<li>The ability to execute JavaScript on the server side is required.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rendering-techniques">Rendering Techniques<a class="hash-link" aria-label="Direct link to Rendering Techniques" title="Direct link to Rendering Techniques" href="https://tonai.github.io/blog/posts/front-end-architecture#rendering-techniques">​</a></h2>
<p>The following techniques are all Server Side Rendering techniques (SSR) that involve processing components on the backend to generate HTML in the HTTP response and address SEO issues. They differ from Client Side Rendering (CSR) used by SPA architecture, which renders content on the client side only.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dynamic-rendering-dr">Dynamic Rendering (DR)<a class="hash-link" aria-label="Direct link to Dynamic Rendering (DR)" title="Direct link to Dynamic Rendering (DR)" href="https://tonai.github.io/blog/posts/front-end-architecture#dynamic-rendering-dr">​</a></h3>
<p>In this technique, the page is dynamically generated on the server. It was primarily used to solve the SEO problems of SPA architecture by rendering frontend framework components on the server and sending the generated output to the client.</p>
<p>However, in terms of performance, it is not necessarily superior to Client Side Rendering (CSR) used by SPA architecture (without utilizing server-side caching).</p>
<p>The time taken to render the UI is similar, whether it occurs on the server for DR or on the frontend for CSR.</p>
<p>In fact, it may even be worse due to the hydration phase (explained in the next section).</p>
<p>Dynamic Rendering is available in frameworks such as Next.js (React), Gatsby (React), Nuxt (Vue), and others.</p>
<p>As previously mentioned, compared to CSR (SPA), the advantages of Dynamic Rendering are:</p>
<ol>
<li>No SEO issues.</li>
</ol>
<p>However, there are some disadvantages:</p>
<ol>
<li>The page is generated on the backend, requiring Node.js and consuming more server resources than CSR.</li>
<li>Caching is necessary to improve performance.</li>
<li>Cache invalidation based on backend changes can be challenging.</li>
<li>The page needs to be hydrated on the client side for interactivity.</li>
<li>The content generated by the server and the client during hydration may differ (e.g., when using JavaScript for responsiveness).</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="static-site-generation-ssg">Static Site Generation (SSG)<a class="hash-link" aria-label="Direct link to Static Site Generation (SSG)" title="Direct link to Static Site Generation (SSG)" href="https://tonai.github.io/blog/posts/front-end-architecture#static-site-generation-ssg">​</a></h3>
<p>In the Static Site Generation (SSG) technique, pages are generated ahead of time during the build phase.</p>
<p>The pages are then stored as static HTML files and served as static content.</p>
<p>This technique is also supported in frameworks like Next.js (React), Gatsby (React), Nuxt (Vue), and others.</p>
<p>SSG offers the following advantages:</p>
<ol>
<li>No SEO problems.</li>
<li>Minimal server load.</li>
<li>Fast page loading.</li>
</ol>
<p>However, there are some drawbacks:</p>
<ol>
<li>Pages are generated during the build phase and remain fully static until the next build.</li>
<li>The build process can be time-consuming.</li>
<li>All pages need to be generated during the build.</li>
<li>The page still requires hydration on the client side to become interactive.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="incremental-static-regeneration-isr">Incremental Static Regeneration (ISR)<a class="hash-link" aria-label="Direct link to Incremental Static Regeneration (ISR)" title="Direct link to Incremental Static Regeneration (ISR)" href="https://tonai.github.io/blog/posts/front-end-architecture#incremental-static-regeneration-isr">​</a></h3>
<p>Incremental Static Regeneration (ISR) is a rendering technique that combines the benefits of SSR and SSG.</p>
<p>Similar to SSG, pages are generated ahead of time during the build phase.</p>
<p>However, there are two options for how to handle page updates:</p>
<p>1. Time-based revalidation: You can specify a time interval during which the page will be cached.</p>
<ul>
<li>Initially, the static page is served for all requests.</li>
<li>When the specified time expires, the framework generates a new version of the page in the background.</li>
<li>Subsequent requests will then use the updated page.</li>
</ul>
<p>2. On-demand revalidation: Your back-office system can inform the framework whenever there are changes, triggering the regeneration of specific pages. This allows for dynamic updates without relying solely on a predetermined time interval.</p>
<p>Next.js (React) supports both time-based and on-demand revalidation, while Nuxt (Vue) currently only supports time-based revalidation.</p>
<p>The advantages of ISR include:</p>
<ol>
<li>SEO compatibility.</li>
<li>Reduced server load compared to SSR.</li>
<li>Fast page loading.</li>
<li>Ability to have dynamic content.</li>
</ol>
<p>However, there are some considerations:</p>
<ol>
<li>Time-based revalidation may result in potential cache issues, as older content may be served until the cache expires.</li>
<li>Implementing revalidation logic between the front-office and back-office is necessary for on-demand revalidation.</li>
<li>Page hydration is still required for interactivity.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jamstack">Jamstack<a class="hash-link" aria-label="Direct link to Jamstack" title="Direct link to Jamstack" href="https://tonai.github.io/blog/posts/front-end-architecture#jamstack">​</a></h3>
<p>From <a href="https://jamstack.org/" target="_blank" rel="noopener noreferrer">Jamstack.org</a>&nbsp;:</p>
<p>Jamstack is an architectural approach that decouples the web experience layer from data and business logic, improving flexibility, scalability, performance, and maintainability.</p>
<p>The core principles of Jamstack include:</p>
<ul>
<li>Decouple Building and Hosting</li>
<li>Decouple Frontend and Backend</li>
<li>Use APIs rather than databases (expose data through APIs, use external tools...etc.)</li>
<li>Generate pre-baked markup, enhanced with JS</li>
</ul>
<p>In practice, a Jamstack setup involves the following steps:</p>
<ol>
<li>Generating pre-rendered static markup using a Static Site Generator.</li>
<li>Hosting the static assets on a CDN (Content Delivery Network).</li>
<li>Enhancing the static markup with JavaScript using a frontend framework.</li>
<li>Integrating with backend APIs for dynamic content.</li>
<li>Storing the entire project in a version control system like Git.</li>
<li>Utilizing automated builds to streamline the deployment process.</li>
</ol>
<p>The advantages of using Jamstack include:</p>
<ol>
<li>SEO compatibility, allowing for better search engine visibility.</li>
<li>Reduced server load due to serving static assets from a CDN.</li>
<li>Fast page loading times for improved user experience.</li>
<li>The ability to incorporate dynamic content through backend APIs.</li>
</ol>
<p>However, there are some considerations:</p>
<ol>
<li>Content management and updates should be handled through version control systems like Git.</li>
<li>For content that live in database, custom logic is required to generate data inside Git (and also maybe to trigger a new build).</li>
<li>Page hydration is still necessary for interactivity on the client side.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary" href="https://tonai.github.io/blog/posts/front-end-architecture#summary">​</a></h3>
<p>We can summarize the different rendering technique in the following table:</p>
<table><thead><tr><th></th><th><code>CSR</code></th><th><code>SSR</code></th><th><code>SSG</code></th><th><code>ISR</code></th><th>JamStack</th></tr></thead><tbody><tr><td>SEO friendly</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Server load</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Loading time</td><td>❌</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Dynamic content</td><td>✅</td><td>✅</td><td>❌</td><td>🔶</td><td>🔶</td></tr><tr><td>Serverless</td><td>✅</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td></tr></tbody></table>
<p>Legend:</p>
<ul>
<li>✅ : OK</li>
<li>❌ : KO</li>
<li>🔶 : Moderately OK</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hydration-techniques">Hydration techniques<a class="hash-link" aria-label="Direct link to Hydration techniques" title="Direct link to Hydration techniques" href="https://tonai.github.io/blog/posts/front-end-architecture#hydration-techniques">​</a></h2>
<p>When utilizing SSR (Server-Side Rendering), the server sends the HTML to the browser, which then renders it. However, until the JavaScript is loaded, the user will not be able to interact with the page.</p>
<p>The purpose of hydration is to enable interactivity on the page by attaching event listeners to the server-generated DOM structure.</p>
<p>The different techniques serve the purpose of enhancing performance, aiming to make the page interactive for the user as quickly as possible upon receiving the response from the server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="static-routes">Static Routes<a class="hash-link" aria-label="Direct link to Static Routes" title="Direct link to Static Routes" href="https://tonai.github.io/blog/posts/front-end-architecture#static-routes">​</a></h3>
<p>In fact, if there are no interactions on certain pages, there is no need to perform hydration on them.</p>
<p>In such cases, there is also no need to send any JavaScript to the client.</p>
<p>This may seem obvious, but not all frameworks have the capability to avoid sending any JavaScript altogether.</p>
<p>In such cases, we end up with the MPA (Multi-Page Application) architecture, as without any JavaScript, there won't be any client-side routing.</p>
<p>This technique is available in the following frameworks: Remix, Sveltekit and SolidStart.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="classical-hydration">Classical hydration<a class="hash-link" aria-label="Direct link to Classical hydration" title="Direct link to Classical hydration" href="https://tonai.github.io/blog/posts/front-end-architecture#classical-hydration">​</a></h3>
<p>When using classical hydration, the component tree structure is generated on the server to create the HTML.</p>
<p>However, on the client side, the tree structure is generated again so that the library can compare the existing HTML and bind events to the appropriate elements.</p>
<p><a href="https://www.patterns.dev/posts/progressive-hydration" target="_blank" rel="noopener noreferrer">The first video of this link</a>&nbsp;shows what happen in the browser during classical hydration.</p>
<p>This is essentially what occurs when using Next.js with the old Pages Router.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="progressive-hydration-or-lazy-hydration">Progressive hydration (or Lazy Hydration)<a class="hash-link" aria-label="Direct link to Progressive hydration (or Lazy Hydration)" title="Direct link to Progressive hydration (or Lazy Hydration)" href="https://tonai.github.io/blog/posts/front-end-architecture#progressive-hydration-or-lazy-hydration">​</a></h3>
<p>The purpose of progressive hydration is to utilize dynamic components to defer the loading of non-urgent components and prioritize the hydration of urgent components.</p>
<p>This technique requires manual implementation by the developer, who decides which components should be lazy loaded and how they should load.</p>
<p><a href="https://www.patterns.dev/posts/progressive-hydration" target="_blank" rel="noopener noreferrer">The second and third videos of this link</a>&nbsp;demonstrate the differences between classical hydration and progressive hydration.</p>
<p>The technical requirements for progressive hydration implementation are as follows:</p>
<ol>
<li>Allows usage of SSR for all components.</li>
<li>Supports splitting of code into individual components or chunks.</li>
<li>Supports client side hydration of these chunks in a developer defined sequence.</li>
<li>Does not block user input on chunks that are already hydrated.</li>
<li>Allows usage of some sort of loading indicator for chunks with deferred hydration.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="selective-hydration">Selective Hydration<a class="hash-link" aria-label="Direct link to Selective Hydration" title="Direct link to Selective Hydration" href="https://tonai.github.io/blog/posts/front-end-architecture#selective-hydration">​</a></h3>
<p>The idea behind selective hydration is to return an incomplete response from the server.</p>
<p>By streaming the response, we can receive some response from the backend even if some queries have not finished yet.</p>
<p>Using this technique, we can start loading JavaScript even when the page is incomplete in order to begin hydration on the possible elements.</p>
<p>When we receive the query response, we can send it back to the browser, which will replace the incomplete UI and then hydrate the new page chunk, <a href="https://www.patterns.dev/posts/react-selective-hydration" target="_blank" rel="noopener noreferrer">as shown in the videos in this page</a>&nbsp;.</p>
<p>This feature was introduced in React 18 with <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noopener noreferrer">renderToPipeableStream</a>&nbsp;and implemented in <a href="https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming#example" target="_blank" rel="noopener noreferrer">Next.js</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="partial-hydration-islands-architecture">Partial Hydration (Islands Architecture)<a class="hash-link" aria-label="Direct link to Partial Hydration (Islands Architecture)" title="Direct link to Partial Hydration (Islands Architecture)" href="https://tonai.github.io/blog/posts/front-end-architecture#partial-hydration-islands-architecture">​</a></h3>
<p>Partial hydration is kind of an updated version of Static Routes.<br>
<!-- -->The purpose of islands is to hydrate at the component level, rather than the entire page.<br>
<!-- -->This technique can be used when only certain components need to be interactive.<br>
<!-- -->Anything outside these islands/components will never change and will not be interactive.<br>
<!-- -->This technique is used by Astro, Marko, Fresh, and 11ty.<br>
<!-- -->And it is also available in Next.js or Gatsby using React Server Components.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="resumable-application">Resumable application<a class="hash-link" aria-label="Direct link to Resumable application" title="Direct link to Resumable application" href="https://tonai.github.io/blog/posts/front-end-architecture#resumable-application">​</a></h3>
<p>This concept is used by Qwik.<br>
<!-- -->The idea behind a resumable application is to serialize the state of the application on the server and then resume from that point on the client.<br>
<!-- -->Even event handlers get serialized, like in this example:</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name namespace" style="color:#00a4db;opacity:0.7">on:</span><span class="token tag attr-name" style="color:#00a4db">click</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">q-671f8656.js#s_D04jAYuCnhM[0 1]</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">click me</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Qwik also extensively utilizes lazy loading to load JavaScript only when needed, such as when clicking on the button in the above example.</p>
<p>This allows for an app that sends minimal inlined JavaScript on the initial load but remains highly interactive.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-1">Summary<a class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary" href="https://tonai.github.io/blog/posts/front-end-architecture#summary-1">​</a></h3>
<p>All of these techniques yield different performance results and may have limitations. However, it is not necessary to compare them extensively.<br>
<!-- -->Major frameworks consider these techniques and continuously evolve to offer new performance improvements.<br>
<!-- -->In most cases, if your application is slow, it is likely not due to the hydration technique being used.<br>
<!-- -->Therefore, hydration will probably not be an issue if you follow the framework documentation, but it's still valuable to be aware of these techniques.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tonai.github.io/blog/posts/front-end-architecture#conclusion">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="do-we-need-a-frontend-framework-">Do we need a frontend framework ?<a class="hash-link" aria-label="Direct link to Do we need a frontend framework ?" title="Direct link to Do we need a frontend framework ?" href="https://tonai.github.io/blog/posts/front-end-architecture#do-we-need-a-frontend-framework-">​</a></h3>
<p>The decision to use a frontend framework depends on the specific requirements of the project.</p>
<p>Here are the pros in favor of using a frontend framework:</p>
<ul>
<li>Maintainability and scalability</li>
<li>Fast and delightful user experience</li>
<li>Standardized front-end approach</li>
<li>Quick prototyping and development</li>
</ul>
<p>On the other hand, there are some cons to consider:</p>
<ul>
<li>Complexity for simple projects</li>
<li>Difficulty integrating with backend tools</li>
<li>Opinionated nature of frameworks</li>
<li>Requires training and familiarity</li>
</ul>
<p>In summary, it is recommended to use a frontend framework when you have a complex frontend with a significant number of user interactions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="headless-or-not-">Headless or not ?<a class="hash-link" aria-label="Direct link to Headless or not ?" title="Direct link to Headless or not ?" href="https://tonai.github.io/blog/posts/front-end-architecture#headless-or-not-">​</a></h3>
<p>Headless architecture is not always the solution.</p>
<p>If you only need some interactions on certain pages, you can use frontend frameworks for those specific components without using them for the entire page.</p>
<p>Here are some considerations for different frameworks:</p>
<ul>
<li>React can be used to render specific components, but it is not SEO-friendly (only for parts rendered with React).</li>
<li>Vue.js can be used in Progressive Enhancement mode, as it is based on the HTML served by the server and is SEO-friendly.</li>
<li>Angular is not well-suited for this scenario.</li>
<li>Some frameworks, like Alpine.js, are designed specifically for this use case.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="seo-or-not-">SEO or not ?<a class="hash-link" aria-label="Direct link to SEO or not ?" title="Direct link to SEO or not ?" href="https://tonai.github.io/blog/posts/front-end-architecture#seo-or-not-">​</a></h3>
<p>If SEO is not a requirement, client-side rendering (CSR) frameworks are usually sufficient.</p>
<p>Examples of scenarios where SEO is not critical include:</p>
<ul>
<li>Backend offices or admin panels</li>
<li>Apps that require authentication</li>
<li>Apps without indexable content (e.g.: <a href="https://excalidraw.com/" target="_blank" rel="noopener noreferrer">Excalidraw</a>&nbsp;)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="choosing-the-rendering-technique">Choosing the Rendering Technique<a class="hash-link" aria-label="Direct link to Choosing the Rendering Technique" title="Direct link to Choosing the Rendering Technique" href="https://tonai.github.io/blog/posts/front-end-architecture#choosing-the-rendering-technique">​</a></h3>
<ol>
<li>If the content is in the source code → JamStack can be used.</li>
<li>If you are building a website with infrequent changes → Static Site Generation (SSG) can be used.</li>
<li>If you can implement a content update logic → Incremental Static Regeneration (ISR) with on-demand revalidation can be used.</li>
<li>If you want to utilize time-based caching → ISR with time-based revalidation can be used.</li>
<li>Otherwise, server-side rendering (SSR) is recommended.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wrap-up">Wrap up<a class="hash-link" aria-label="Direct link to Wrap up" title="Direct link to Wrap up" href="https://tonai.github.io/blog/posts/front-end-architecture#wrap-up">​</a></h3>
<p>To summarize, the decision on using a frontend framework, headless architecture, SEO considerations, and rendering technique should be based on the specific requirements of the project.<br>
<!-- -->The schema below provides a visual representation that can assist in choosing the appropriate architecture with the corresponding rendering technique:</p>
<p><img decoding="async" loading="lazy" alt="app" src="https://tonai.github.io/blog/assets/images/summary-en.drawio-9e7135aab18513c093aa5c51ea591856.png" width="1021" height="601" class="img_ev3q"></p>
<p>Please note that this schema serves as a helpful guideline, but there may be certain edge cases where it may not fully apply. It's important to consider the unique characteristics and needs of your project when making these decisions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a class="hash-link" aria-label="Direct link to Resources" title="Direct link to Resources" href="https://tonai.github.io/blog/posts/front-end-architecture#resources">​</a></h3>
<p><a href="https://www.epicweb.dev/the-webs-next-transition" target="_blank" rel="noopener noreferrer">https://www.epicweb.dev/the-webs-next-transition</a><br>
<a href="https://buchet.tech/blog/csr-ssr-ssg-isr-wtf" target="_blank" rel="noopener noreferrer">https://buchet.tech/blog/csr-ssr-ssg-isr-wtf</a><br>
<a href="https://www.sitepen.com/blog/intro-to-html-first-frontend-frameworks" target="_blank" rel="noopener noreferrer">https://www.sitepen.com/blog/intro-to-html-first-frontend-frameworks</a><br>
<a href="https://www.patterns.dev/" target="_blank" rel="noopener noreferrer">https://www.patterns.dev/</a><br>
<a href="https://dev.to/this-is-learning/why-efficient-hydration-in-javascript-frameworks-is-so-challenging-1ca3" target="_blank" rel="noopener noreferrer">https://dev.to/this-is-learning/why-efficient-hydration-in-javascript-frameworks-is-so-challenging-1ca3</a></p>]]></content>
        <author>
            <name>Tony Cabaye</name>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="frameworks" term="frameworks"/>
    </entry>
</feed>